#rebuild package
devtools::build()
#rebuild package
devtools::build()
#load rcpp exports
Rcpp::sourceCpp(file= "src/Movement.cpp")
Rcpp::sourceCpp(file= "src/RcppExports.cpp")
Rcpp::compileAttributes() #this updates RcppExports.R file, which contains function definitions
devtools::build()
Rcpp::sourceCpp(file= "src/Movement.cpp")
Rcpp::sourceCpp(file= "src/RcppExports.cpp")
Rcpp::compileAttributes() #this updates RcppExports.R file, which contains function definitions
loadedPackages <- c("rgdal", "data.table", "maptools","envi", "raster", "RStoolbox", "spatstat.data", "spatstat.geom", "spatstat.core")
invisible(lapply(loadedPackages, library, character.only = TRUE))
#haddock
Had_mat <- readRDS(file="TestScripts/Habitat_plots/Haddock/Haddock_Weighted_AdaptFalse_MATRIX.RDS")
fields::image.plot(Had_mat)
#cod
Cod_mat <- readRDS(file="TestScripts/Habitat_plots/Cod/Cod_Weighted_AdaptFalse_MATRIX.RDS")
fields::image.plot(Cod_mat)
#yellowtail
Yell_mat <- readRDS(file="TestScripts/Habitat_plots/YellowtailFlounder/YellowtailFlounder_Weighted_AdaptFalse_MATRIX.RDS")
fields::image.plot(Yell_mat)
hab<- list()
hab[["hab"]][["spp1"]] <- Had_mat / sum(Had_mat,na.rm = T) #normalize like MFS does
hab[["hab"]][["spp2"]] <- Cod_mat / sum(Cod_mat, na.rm=T)
hab[["hab"]][["spp3"]] <- Yell_mat / sum(Yell_mat, na.rm=T)
#install.packages('Rcpp')
#install.packages('Rtools')
#install.packages('MixFishSim')
library(MixFishSim)
#NEW VERSION that has week breaks for entire simulation and allows fishing on just 1 day per week
source("R/init_sim_Bens_nofish.R")
sim <- init_sim_Bens_nofish(nrows = 100, ncols = 100, n_years = 22, n_tows_day = 1,
n_days_wk_fished = 1, n_fleets = 1, n_vessels = 1, n_species = 2,
move_freq = 1)
sim <- init_sim_Bens_nofish(nrows = 100, ncols = 100, n_years = 1, n_tows_day = 1,
n_days_wk_fished = 1, n_fleets = 1, n_vessels = 1, n_species = 2,
move_freq = 1)
hab<-readRDS("TestScripts/hab_16strata")
source("R/init_pop_Bens.R")
#decreasing population settings
Pop <- init_pop_Bens(sim_init = sim, Bio = c("spp1" = 4e5, "spp2" = 10e5), #these values from paper : 1e5 and 2e5
hab = hab[["hab"]], start_cell = c(50,50),
lambda = c("spp1" = 0.1, "spp2" = 0.1), #same lambda for all?
init_move_steps = 20,
rec_params = list("spp1" = c("model" = "BH", "a" = 2, "b" = 4, "cv" = 0),
"spp2" = c("model" = "BH", "a" = 7, "b" = 4,"cv" = 0)), #these values from paper
rec_wk = list("spp1" = 15:18, "spp2" = 15:18),
spwn_wk = list("spp1" = 15:18, "spp2" = 15:18),
M = c("spp1" = 0.275, "spp2" = 0.225), #these values from paper: c("spp1" = 0.2, "spp2" = 0.1)
K = c("spp1" = 0.3, "spp2" = 0.3) #all the same for now
)
Rcpp::sourceCpp(file= "src/Movement.cpp")
Rcpp::sourceCpp(file= "src/RcppExports.cpp")
Rcpp::compileAttributes() #this updates RcppExports.R file, which contains function definitions
#CALULATE INDICES OF NONZERO VALUES IN HAB TO PASS TO MOVE_POPULAITON DURING MOVEMENT
nonzero_idx <- lapply(paste0("spp", seq_len(sim$idx[["n.spp"]])), function(s) {
which(hab[["hab"]][[s]] >0 , arr.ind=T)
})
names(nonzero_idx) <- paste("spp",seq_len(sim$idx[["n.spp"]]), sep ="")
#decreasing population settings
Pop <- init_pop_Bens(sim_init = sim, Bio = c("spp1" = 4e5, "spp2" = 10e5), #these values from paper : 1e5 and 2e5
hab = hab[["hab"]], start_cell = c(50,50),
lambda = c("spp1" = 0.1, "spp2" = 0.1), #same lambda for all?
init_move_steps = 20,
rec_params = list("spp1" = c("model" = "BH", "a" = 2, "b" = 4, "cv" = 0),
"spp2" = c("model" = "BH", "a" = 7, "b" = 4,"cv" = 0)), #these values from paper
rec_wk = list("spp1" = 15:18, "spp2" = 15:18),
spwn_wk = list("spp1" = 15:18, "spp2" = 15:18),
M = c("spp1" = 0.275, "spp2" = 0.225), #these values from paper: c("spp1" = 0.2, "spp2" = 0.1)
K = c("spp1" = 0.3, "spp2" = 0.3), #all the same for now
nz = nonzero_idx
)
load("~/Bens_R_Projects/READ-PDB-blevy2-MFS/20 year moveCov matrices/Generic/Constant_temp_22yr.RData")
#set temperature preferences manually.
#The following assumes moveCov has been created and already has an empty spp_tol sublist
moveCov[["spp_tol"]] <- list() #just in case
moveCov[["spp_tol"]] <- list("spp1" = list("mu" = 7.98, "va" = 3),  #8.13 IF TEMP INCREASES   7.98 if temp constant
"spp2" = list("mu" = 7.98, "va" = 3) )
#no fishing
fleets <- init_fleet(sim_init = sim, VPT = list("spp1" = 0, "spp2" = 0), #VPT = value per ton
Qs = list("fleet 1" = c("spp1" = 0, "spp2" = 0)   #Q = catchability
),
fuelC = list("fleet1" = 3),
step_params = list("fleet 1" = c("rate" = 3, "B1" = 1, "B2" = 2, "B3" = 3)
),
past_knowledge = FALSE,  #dont use past knowledge
past_year_month = TRUE,
past_trip = TRUE,
threshold = 0.7
)
source("R/run_sim.R")
#to source a new go_fish where I edited to skips most things:
#1: load file
source("R/go_fish_Bens.R") #my edited version that skips most things
#2: allow the function to call other hidden functions from mixfishsim
environment(go_fish_Bens) <- asNamespace('MixFishSim')
#3: replace go_fish with go_fish_Bens in the MixFishSim package
assignInNamespace("go_fish", go_fish_Bens, ns = "MixFishSim")
res<- run_sim(sim_init = sim,
pop_init = Pop,
move_cov = moveCov,
fleets_init = fleets,
hab_init = hab,
save_pop_bio = TRUE,
survey = NULL, #surv_random, will try to survey after simulation
closure = NULL,
InParallel = TRUE,
nz = nonzero_idx)  #does it runin parallel? Doesnt seem like it
start_time <- Sys.time() # record start time
res<- run_sim(sim_init = sim,
pop_init = Pop,
move_cov = moveCov,
fleets_init = fleets,
hab_init = hab,
save_pop_bio = TRUE,
survey = NULL, #surv_random, will try to survey after simulation
closure = NULL,
InParallel = TRUE,
nz = nonzero_idx)  #does it runin parallel? Doesnt seem like it
end_time <- Sys.time() # record end time
tot_time <- end_time - start_time # calculate duration of lrren() example
#no fishing
fleets <- init_fleet(sim_init = sim, VPT = list("spp1" = 0, "spp2" = 0), #VPT = value per ton
Qs = list("fleet 1" = c("spp1" = 0, "spp2" = 0)   #Q = catchability
),
fuelC = list("fleet1" = 3),
step_params = list("fleet 1" = c("rate" = 3, "B1" = 1, "B2" = 2, "B3" = 3)
),
past_knowledge = FALSE,  #dont use past knowledge
past_year_month = TRUE,
past_trip = TRUE,
threshold = 0.7
)
start_time <- Sys.time() # record start time
res<- run_sim(sim_init = sim,
pop_init = Pop,
move_cov = moveCov,
fleets_init = fleets,
hab_init = hab,
save_pop_bio = TRUE,
survey = NULL, #surv_random, will try to survey after simulation
closure = NULL,
InParallel = TRUE,
nz = nonzero_idx)  #does it runin parallel? Doesnt seem like it
end_time <- Sys.time() # record end time
tot_time <- end_time - start_time # calculate duration of lrren() example
sim$idx
sim <- init_sim_Bens_nofish(nrows = 100, ncols = 100, n_years = 1, n_tows_day = 1,
n_days_wk_fished = 1, n_fleets = 1, n_vessels = 1, n_species = 2,
move_freq = 1)
#no fishing
fleets <- init_fleet(sim_init = sim, VPT = list("spp1" = 0, "spp2" = 0), #VPT = value per ton
Qs = list("fleet 1" = c("spp1" = 0, "spp2" = 0)   #Q = catchability
),
fuelC = list("fleet1" = 3),
step_params = list("fleet 1" = c("rate" = 3, "B1" = 1, "B2" = 2, "B3" = 3)
),
past_knowledge = FALSE,  #dont use past knowledge
past_year_month = TRUE,
past_trip = TRUE,
threshold = 0.7
)
start_time <- Sys.time() # record start time
res<- run_sim(sim_init = sim,
pop_init = Pop,
move_cov = moveCov,
fleets_init = fleets,
hab_init = hab,
save_pop_bio = TRUE,
survey = NULL, #surv_random, will try to survey after simulation
closure = NULL,
InParallel = TRUE,
nz = nonzero_idx)  #does it runin parallel? Doesnt seem like it
end_time <- Sys.time() # record end time
tot_time <- end_time - start_time # calculate duration of lrren() example
22*1.732
1+1
#load rcpp exports
Rcpp::sourceCpp(file= "src/Movement.cpp")
Rcpp::sourceCpp(file= "src/RcppExports.cpp")
Rcpp::compileAttributes() #this updates RcppExports.R file, which contains function definitions
#load rcpp exports
Rcpp::sourceCpp(file= "src/Movement.cpp")
#load rcpp exports
Rcpp::sourceCpp(file= "src/Movement.cpp")
Rcpp::sourceCpp(file= "src/RcppExports.cpp")
Rcpp::compileAttributes() #this updates RcppExports.R file, which contains function definitions
#this starts the profiling
library(profvis)
#LOAD HABITAT PREVIOUSLY CREATED
hab <- readRDS(file="hab_justYT.RDS")
#plot strata
par(mar=c(1,1,1,1))
fields::image.plot(hab$stratas)
#plot habitat
par(mar=c(1,1,1,1))
fields::image.plot(hab[["hab"]][["spp1"]])
#plot spawn habitat
par(mar=c(1,1,1,1))
fields::image.plot(hab[["spwn_hab"]][["spp1"]])
#NEW VERSION that has week breaks for entire simulation and allows fishing on just 1 day per week
source("R/init_sim_Bens_nofish.R")
sim <- init_sim_Bens_nofish(nrows = nrow(hab$hab$spp1), ncols = ncol(hab$hab$spp1), n_years = 22, n_tows_day = 1,n_days_wk_fished = 1, n_fleets = 1, n_vessels = 1, n_species = 1,
move_freq = 1)
#CALULATE INDICES OF NONZERO VALUES IN HAB TO PASS TO MOVE_POPULAITON DURING MOVEMENT
nonzero_idx <- lapply(paste0("spp", seq_len(sim$idx[["n.spp"]])), function(s) {
which(hab[["hab"]][[s]] >0 , arr.ind=T)
})
names(nonzero_idx) <- paste("spp",seq_len(sim$idx[["n.spp"]]), sep ="")
source("R/init_pop_Bens.R")
#decreasing population settings
Pop <- init_pop_Bens(sim_init = sim, Bio = c("spp1" = 3194), #CHANGE
hab = hab[["hab"]], start_cell = c(42,155),
lambda = c("spp1" = 0), #set at 0 first, change after initial population set
init_move_steps = 20,
rec_params = list("spp1" = c("model" = "BH", "a" = 2, "b" = 4, "cv" = 0)), #CHANGE
rec_wk = list("spp1" = 9:12),
spwn_wk = list("spp1" = 9:12), #CORRECT FOR YTF
M = c("spp1" = 0.275), #CHANGE
K = c("spp1" = 0.3, "spp2" = 0.3), #CHANGE
nz = nonzero_idx
)
#set lambda at 0 first, change after initial population set
Pop$dem_params$spp1$lambda <- .1
fields::image.plot(Pop$Start_pop[[1]], main = "spp1 starting biomass")
d temp gradient
moveCov <- readRDS(file="20 year moveCov matrices/GeorgesBank/GB_22yr_ConstTemp_HaddockStrata")
#set temperature preferences manually.
#The following assumes moveCov has been created and already has an empty spp_tol sublist
moveCov[["spp_tol"]] <- list() #just in case
moveCov[["spp_tol"]] <- list("spp1" = list("mu" = 9, "va" = 4),  #Haddock
"spp2" = list("mu" = 8.75, "va" = 4.25),  #Cod
"spp3" = list("mu" = 9, "va" = 4) )    #Yellowtail
library(MixFishSim)
#no fishing
fleets <- init_fleet(sim_init = sim, VPT = list("spp1" = 0, "spp2" = 0), #VPT = value per ton
Qs = list("fleet 1" = c("spp1" = 0, "spp2" = 0)   #Q = catchability
),
fuelC = list("fleet1" = 3),
step_params = list("fleet 1" = c("rate" = 3, "B1" = 1, "B2" = 2, "B3" = 3)
),
past_knowledge = FALSE,  #dont use past knowledge
past_year_month = TRUE,
past_trip = TRUE,
threshold = 0.7
)
source("R/run_sim.R")
#to source a new go_fish where I edited to skips most things:
#1: load file
source("R/go_fish_Bens.R") #my edited version that skips most things
#2: allow the function to call other hidden functions from mixfishsim
environment(go_fish_Bens) <- asNamespace('MixFishSim')
#3: replace go_fish with go_fish_Bens in the MixFishSim package
assignInNamespace("go_fish", go_fish_Bens, ns = "MixFishSim")
start_time <- Sys.time() # record start time
res<- run_sim(sim_init = sim,
pop_init = Pop,
move_cov = moveCov,
fleets_init = fleets,
hab_init = hab,
save_pop_bio = TRUE,
survey = NULL, #surv_random, will try to survey after simulation
closure = NULL,
InParallel = TRUE,
nz = nonzero_idx)  #does it runin parallel? Doesnt seem like it
end_time <- Sys.time() # record end time
tot_time <- end_time - start_time # calculate duration of lrren() example
class(nonzero_idx)
source("R/run_sim.R")
res<- run_sim(sim_init = sim,
pop_init = Pop,
move_cov = moveCov,
fleets_init = fleets,
hab_init = hab,
save_pop_bio = TRUE,
survey = NULL, #surv_random, will try to survey after simulation
closure = NULL,
InParallel = TRUE,
nz = nonzero_idx)  #does it runin parallel? Doesnt seem like it
source("R/run_sim.R")
res<- run_sim(sim_init = sim,
pop_init = Pop,
move_cov = moveCov,
fleets_init = fleets,
hab_init = hab,
save_pop_bio = TRUE,
survey = NULL, #surv_random, will try to survey after simulation
closure = NULL,
InParallel = TRUE,
nz = nonzero_idx)  #does it runin parallel? Doesnt seem like it
source("R/run_sim.R")
res<- run_sim(sim_init = sim,
pop_init = Pop,
move_cov = moveCov,
fleets_init = fleets,
hab_init = hab,
save_pop_bio = TRUE,
survey = NULL, #surv_random, will try to survey after simulation
closure = NULL,
InParallel = TRUE,
nz = nonzero_idx)  #does it runin parallel? Doesnt seem like it
source("R/run_sim.R")
res<- run_sim(sim_init = sim,
pop_init = Pop,
move_cov = moveCov,
fleets_init = fleets,
hab_init = hab,
save_pop_bio = TRUE,
survey = NULL, #surv_random, will try to survey after simulation
closure = NULL,
InParallel = TRUE,
nz = nonzero_idx)  #does it runin parallel? Doesnt seem like it
source("R/run_sim.R")
res<- run_sim(sim_init = sim,
pop_init = Pop,
move_cov = moveCov,
fleets_init = fleets,
hab_init = hab,
save_pop_bio = TRUE,
survey = NULL, #surv_random, will try to survey after simulation
closure = NULL,
InParallel = TRUE,
nz = nonzero_idx)  #does it runin parallel? Doesnt seem like it
start_time <- Sys.time() # record start time
res<- run_sim(sim_init = sim,
pop_init = Pop,
move_cov = moveCov,
fleets_init = fleets,
hab_init = hab,
save_pop_bio = TRUE,
survey = NULL, #surv_random, will try to survey after simulation
closure = NULL,
InParallel = TRUE,
nz = nonzero_idx)  #does it runin parallel? Doesnt seem like it
end_time <- Sys.time() # record end time
tot_time <- end_time - start_time # calculate duration of lrren() example
