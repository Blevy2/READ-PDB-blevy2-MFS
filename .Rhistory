all_cod_strat_num[[i]]<-x2
}
cod_stratas <- Reduce('+',all_cod_strat_num)
cod_stratas<- as.matrix(cod_stratas)
fields::image.plot(cod_stratas)
#YELLOWTAIL FLOUNDER
all_yell_strat_num <- list()
for(i in seq(length(GB_yell_strata))){
GB_strata_idx <- match(GB_yell_strata@data[["STRATUMA"]][i],strata.areas@data[["STRATUMA"]])
specific_strata <- strata.areas[GB_strata_idx,]
strat_num <- specific_strata$STR2
#first make everything outside strata 0
x1<- mask(Yell_ras,specific_strata,updatevalue=0)
#then make everything inside given strata the strata number
x2<- mask(x1,specific_strata,inverse=TRUE,updatevalue=strat_num)
all_yell_strat_num[[i]]<-x2
}
yell_stratas <- Reduce('+',all_yell_strat_num)
yell_stratas<- as.matrix(yell_stratas)
fields::image.plot(yell_stratas)
#store values just created
#hab[["stratas"]] <- list(had_stratas,cod_stratas,yell_stratas)
hab[["stratas"]] <- had_stratas #just use haddock because it contains others
###########################################################################
source("R/create_spawn_hab_Bens.R")
source("R/create_spawn_hab_Bens.R")
loadedPackages <- c("rgdal", "data.table", "maptools","envi", "raster", "RStoolbox", "spatstat.data", "spatstat.geom", "spatstat.core")
invisible(lapply(loadedPackages, library, character.only = TRUE))
#load habitat raster previously created and increase resolution
library(raster)
#haddock
Had_ras <- readRDS(file="TestScripts/Habitat_plots/Haddock/Haddock_Weighted_AdaptFalse_RASTER.RDS")
plot(Had_ras)
#cod
Cod_ras <- readRDS(file="TestScripts/Habitat_plots/Cod/Cod_Weighted_AdaptFalse_RASTER.RDS")
plot(Cod_ras)
#yellowtail
Yell_ras <- readRDS(file="TestScripts/Habitat_plots/YellowtailFlounder/YellowtailFlounder_Weighted_AdaptFalse_RASTER.RDS")
plot(Yell_ras)
#alter resolution.
#Yell_ras1 <- raster::aggregate(Yell_ras,fact=2) #can only use interger factor
res_factor <- .65  #amount to increase resolution
r <- raster(extent(Yell_ras), nrow = round(res_factor*nrow(Yell_ras)), ncol = round(res_factor*ncol(Yell_ras)) , crs = crs(Yell_ras))
nrow(r)
#Yellowtail
Yell_ras1 <- resample(x=Yell_ras, y=r, method="ngb")
nrow(Yell_ras1)
plot(Yell_ras1)
plot(Yell_ras)
fields::image.plot(as.matrix(Yell_ras1))
#total cells
ncol(as.matrix(Yell_ras))*nrow(as.matrix(Yell_ras))
ncol(as.matrix(Yell_ras1))*nrow(as.matrix(Yell_ras1))
#see how many zero and nonzero values there are
sum(colSums(as.matrix(Yell_ras1)==0,na.rm = T)) #zero
sum(colSums(as.matrix(Yell_ras1)>0,na.rm = T)) #nonzero
length(as.matrix(Yell_ras1)[,1])*length(as.matrix(Yell_ras1)[1,]) #total cells including NAs
#see how many zero and nonzero values there are
sum(colSums(as.matrix(Yell_ras)==0,na.rm = T)) #zero
sum(colSums(as.matrix(Yell_ras)>0,na.rm = T)) #nonzero
length(as.matrix(Yell_ras)[,1])*length(as.matrix(Yell_ras)[1,]) #total cells including NAs
#Cod
Cod_ras1 <- resample(x=Cod_ras, y=r, method="ngb")
plot(Cod_ras)
plot(Cod_ras1)
#see how many zero and nonzero values there are
sum(colSums(as.matrix(Cod_ras1)==0,na.rm = T)) #zero
sum(colSums(as.matrix(Cod_ras1)>0,na.rm = T)) #nonzero
length(as.matrix(Cod_ras1)[,1])*length(as.matrix(Cod_ras1)[1,]) #total cells including NAs
#see how many zero and nonzero values there are
sum(colSums(as.matrix(Cod_ras)==0,na.rm = T)) #zero
sum(colSums(as.matrix(Cod_ras)>0,na.rm = T)) #nonzero
length(as.matrix(Cod_ras)[,1])*length(as.matrix(Cod_ras)[1,]) #total cells including NAs
#Haddock
Had_ras1 <- resample(x=Had_ras, y=r, method="ngb")
plot(Had_ras)
plot(Had_ras1)
#see how many zero and nonzero values there are
sum(colSums(as.matrix(Had_ras1)==0,na.rm = T)) #zero
sum(colSums(as.matrix(Had_ras1)>0,na.rm = T)) #nonzero
length(as.matrix(Had_ras1)[,1])*length(as.matrix(Had_ras1)[1,]) #total cells including NAs
#see how many zero and nonzero values there are
sum(colSums(as.matrix(Had_ras)==0,na.rm = T)) #zero
sum(colSums(as.matrix(Had_ras)>0,na.rm = T)) #nonzero
length(as.matrix(Had_ras)[,1])*length(as.matrix(Had_ras)[1,]) #total cells including NAs
#redefine final objects
Had_mat <- as.matrix(Had_ras1)
Cod_mat <- as.matrix(Cod_ras1)
Yell_mat <- as.matrix(Yell_ras1)
Had_ras <- Had_ras1
Cod_ras <- Cod_ras1
Yell_ras <- Yell_ras1
hab<- list()
hab[["hab"]][["spp1"]] <- Had_mat / sum(Had_mat,na.rm = T) #normalize like MFS does
hab[["hab"]][["spp2"]] <- Cod_mat / sum(Cod_mat, na.rm=T)
hab[["hab"]][["spp3"]] <- Yell_mat / sum(Yell_mat, na.rm=T)
#CREATE HADDOCK STRATA
strata.dir <- "C:\\Users\\benjamin.levy\\Desktop\\NOAA\\GIS_Stuff\\" # strata shape files in this directory
# get the shapefiles
strata.areas <- readOGR(paste(strata.dir,"Survey_strata", sep="")) #readShapePoly is deprecated; use rgdal::readOGR or sf::st_read
#define georges bank
GB_Had_strata_num <- c("01130","01140","01150","01160","01170","01180","01190","01200","01210","01220","01230","01240","01250", "01290", "01300")
#pull out indices corresponding to GB strata
GB_strata_idx <- match(GB_Had_strata_num,strata.areas@data[["STRATUMA"]])
#plot them
#plot(strata.areas[GB_strata_idx,])
#define GB strata as own object
GB_had_strata <- strata.areas[GB_strata_idx,]
plot(GB_had_strata)
#CREATE COD STRATA
#define georges bank
GB_Cod_strata_num <- c("01130","01140","01150","01160","01170","01180","01190","01200","01210","01220","01230","01240","01250")
#pull out indices corresponding to GB strata
GB_strata_idx <- match(GB_Cod_strata_num,strata.areas@data[["STRATUMA"]])
#plot them
#plot(strata.areas[GB_strata_idx,])
#define GB strata as own object
GB_cod_strata <- strata.areas[GB_strata_idx,]
plot(GB_cod_strata)
#CREATE YELLOWTAIL STRATA
#define georges bank
GB_Yel_strata_num <- c("01130","01140","01150","01160","01170","01180","01190","01200","01210")
#pull out indices corresponding to GB strata
GB_strata_idx <- match(GB_Yel_strata_num,strata.areas@data[["STRATUMA"]])
#plot them
#plot(strata.areas[GB_strata_idx,])
#define GB strata as own object
GB_yell_strata <- strata.areas[GB_strata_idx,]
plot(GB_yell_strata)
#ADD "STRATA" list to hab which is used to determine how many total strata there are in Bens_init_survey
hab[["strata"]] <- GB_had_strata@data$FINSTR_ID
#load previously created rasters
#haddock
#Had_ras <- readRDS(file="TestScripts/Habitat_plots/Haddock/Haddock_Weighted_AdaptFalse_RASTER.RDS")
plot(Had_ras)
plot(GB_had_strata,add=T)
#cod
#Cod_ras <- readRDS(file="TestScripts/Habitat_plots/Cod/Cod_Weighted_AdaptFalse_RASTER.RDS")
plot(Cod_ras)
plot(GB_cod_strata,add=T)
#yellowtail
#Yell_ras <- readRDS(file="TestScripts/Habitat_plots/YellowtailFlounder/YellowtailFlounder_Weighted_AdaptFalse_RASTER.RDS")
plot(Yell_ras)
plot(GB_yell_strata,add=T)
###########################################################################
#create matrix with strata number inside each strata (same as hab$stratas)
#HADDOCK
all_had_strat_num <- list()
for(i in seq(length(GB_had_strata))){
GB_strata_idx <- match(GB_had_strata@data[["STRATUMA"]][i],strata.areas@data[["STRATUMA"]])
specific_strata <- strata.areas[GB_strata_idx,]
strat_num <- specific_strata$STR2
#first make everything outside strata 0
x1<- mask(Had_ras,specific_strata,updatevalue=0)
#then make everything inside given strata the strata number
x2<- mask(x1,specific_strata,inverse=TRUE,updatevalue=strat_num)
all_had_strat_num[[i]]<-x2
}
had_stratas <- Reduce('+',all_had_strat_num)
had_stratas<- as.matrix(had_stratas)
fields::image.plot(had_stratas)
#COD
all_cod_strat_num <- list()
for(i in seq(length(GB_cod_strata))){
GB_strata_idx <- match(GB_cod_strata@data[["STRATUMA"]][i],strata.areas@data[["STRATUMA"]])
specific_strata <- strata.areas[GB_strata_idx,]
strat_num <- specific_strata$STR2
#first make everything outside strata 0
x1<- mask(Cod_ras,specific_strata,updatevalue=0)
#then make everything inside given strata the strata number
x2<- mask(x1,specific_strata,inverse=TRUE,updatevalue=strat_num)
all_cod_strat_num[[i]]<-x2
}
cod_stratas <- Reduce('+',all_cod_strat_num)
cod_stratas<- as.matrix(cod_stratas)
fields::image.plot(cod_stratas)
#YELLOWTAIL FLOUNDER
all_yell_strat_num <- list()
for(i in seq(length(GB_yell_strata))){
GB_strata_idx <- match(GB_yell_strata@data[["STRATUMA"]][i],strata.areas@data[["STRATUMA"]])
specific_strata <- strata.areas[GB_strata_idx,]
strat_num <- specific_strata$STR2
#first make everything outside strata 0
x1<- mask(Yell_ras,specific_strata,updatevalue=0)
#then make everything inside given strata the strata number
x2<- mask(x1,specific_strata,inverse=TRUE,updatevalue=strat_num)
all_yell_strat_num[[i]]<-x2
}
yell_stratas <- Reduce('+',all_yell_strat_num)
yell_stratas<- as.matrix(yell_stratas)
fields::image.plot(yell_stratas)
#store values just created
#hab[["stratas"]] <- list(had_stratas,cod_stratas,yell_stratas)
hab[["stratas"]] <- had_stratas #just use haddock because it contains others
###########################################################################
###########################################################################
# NEED TO DEFINE SPAWNING GROUNDS
source("R/create_spawn_hab_Bens.R")
source("R/define_spawn_Bens.R")
#yellowtail in May (weeks 9, 10, 11, 12)
max(hab$hab$spp3,na.rm=T)  #max is 0.0006653
YT_spwn_ind <-which(hab$hab$spp3 >= 0 , arr.ind=T) #4,279 total non NA cells
YT_spwn_ind <-which(hab$hab$spp3 > 0 , arr.ind=T)  #3,110 are >0
YT_spwn_ind <-which(hab$hab$spp3 >= .0006 , arr.ind=T) #832 are above .0006
#will use southwest red area and northeast red area for spawning
#northeast between rows 40-80 and columns 155-196
#use .0002 in NE corner
YT_spwn_ind <-which(hab$hab$spp3 >= .0006 , arr.ind=T) #832 are above .0006
YT_spwn_NE <- YT_spwn_ind[(YT_spwn_ind[,1]>=res_factor*40) & (YT_spwn_ind[,1]<=res_factor*80) & (YT_spwn_ind[,2]>=res_factor*155) & (YT_spwn_ind[,2]<=res_factor*196), ]
#will use southwest red area and northeast red area for spawning
#SW between rows 96 to 127 and columns 50 to 82
#use .0001 in SW corner
YT_spwn_ind <-which(hab$hab$spp3 >= .0004 , arr.ind=T) #3,833 are above .0001
YT_spwn_SW <- YT_spwn_ind[(YT_spwn_ind[,1]>=res_factor*96) & (YT_spwn_ind[,1]<=res_factor*127) & (YT_spwn_ind[,2]>=res_factor*50) & (YT_spwn_ind[,2]<=res_factor*82), ]
YT_spwn <- rbind(YT_spwn_NE,YT_spwn_SW)
spwn_mult <- 10
YT_spwn_hab <- create_spawn_hab_Bens(hab = hab$hab$spp3, spwnareas = YT_spwn, mult = spwn_mult)
fields::image.plot(YT_spwn_hab)
hab[["spwn_hab"]] <- list()
hab[["spwn_hab"]][["spp1"]] <- YT_spwn_hab #CHANGE THIS
hab[["spwn_hab"]][["spp2"]] <- YT_spwn_hab #CHANGE THIS
hab[["spwn_hab"]][["spp3"]] <- YT_spwn_hab
#
#INTEGRATE WITH TEMP GRADIENT
#constant temp gradient
moveCov <- readRDS(file="20 year moveCov matrices/GeorgesBank/GB_22yr_ConstTemp_HaddockStrata")
#add temp tolerances order: had, cod, yellow
moveCov[["spp_tol"]] <- list() #just in case
moveCov[["spp_tol"]] <- list("spp1" = list("mu" = 9, "va" = 4),
"spp2" = list("mu" = 8.75, "va" = 4.25),
"spp3" = list("mu" = 9, "va" = 4) )
temp <- hab
hab <- list()
hab[["hab"]] <- temp$hab$spp3
hab$strata <- temp$strata
hab$stratas <- temp$stratas
hab$spwn_hab <- temp$spwn_hab$spp3
saveRDS(hab, file="hab_justYT2.RDS")
#LOAD HABITAT PREVIOUSLY CREATED
#hab <- readRDS(file="hab_justYT.RDS") #finer resolution
hab <- readRDS(file="hab_justYT.RDS") #courser resolution
#plot strata
par(mar=c(1,1,1,1))
fields::image.plot(hab$stratas)
#plot habitat
par(mar=c(1,1,1,1))
fields::image.plot(hab[["hab"]][["spp1"]])
#plot spawn habitat
par(mar=c(1,1,1,1))
fields::image.plot(hab[["spwn_hab"]][["spp1"]])
#NEW VERSION that has week breaks for entire simulation and allows fishing on just 1 day per week
source("R/init_sim_Bens_nofish.R")
sim <- init_sim_Bens_nofish(nrows = nrow(hab$hab$spp1), ncols = ncol(hab$hab$spp1), n_years = 22, n_tows_day = 1,n_days_wk_fished = 1, n_fleets = 1, n_vessels = 1, n_species = 1,
move_freq = 1)
View(hab)
#
#
# #CREATE HABITAT WITH FEWER SPECIES FOR TEST
# temp <- hab
# hab <- list()
# hab[["hab"]] <- temp$hab$spp3
# hab$strata <- temp$strata
# hab$stratas <- temp$stratas
# hab$spwn_hab <- temp$spwn_hab$spp3
saveRDS(hab, file="hab_justYT2.RDS")
#load habitat raster previously created and increase resolution
library(raster)
#haddock
Had_ras <- readRDS(file="TestScripts/Habitat_plots/Haddock/Haddock_Weighted_AdaptFalse_RASTER.RDS")
plot(Had_ras)
#cod
Cod_ras <- readRDS(file="TestScripts/Habitat_plots/Cod/Cod_Weighted_AdaptFalse_RASTER.RDS")
plot(Cod_ras)
#yellowtail
Yell_ras <- readRDS(file="TestScripts/Habitat_plots/YellowtailFlounder/YellowtailFlounder_Weighted_AdaptFalse_RASTER.RDS")
plot(Yell_ras)
#alter resolution.
#Yell_ras1 <- raster::aggregate(Yell_ras,fact=2) #can only use interger factor
res_factor <- .65  #amount to increase resolution
r <- raster(extent(Yell_ras), nrow = round(res_factor*nrow(Yell_ras)), ncol = round(res_factor*ncol(Yell_ras)) , crs = crs(Yell_ras))
nrow(r)
#Yellowtail
Yell_ras1 <- resample(x=Yell_ras, y=r, method="ngb")
nrow(Yell_ras1)
plot(Yell_ras1)
plot(Yell_ras)
fields::image.plot(as.matrix(Yell_ras1))
#total cells
ncol(as.matrix(Yell_ras))*nrow(as.matrix(Yell_ras))
ncol(as.matrix(Yell_ras1))*nrow(as.matrix(Yell_ras1))
#see how many zero and nonzero values there are
sum(colSums(as.matrix(Yell_ras1)==0,na.rm = T)) #zero
sum(colSums(as.matrix(Yell_ras1)>0,na.rm = T)) #nonzero
length(as.matrix(Yell_ras1)[,1])*length(as.matrix(Yell_ras1)[1,]) #total cells including NAs
#see how many zero and nonzero values there are
sum(colSums(as.matrix(Yell_ras)==0,na.rm = T)) #zero
sum(colSums(as.matrix(Yell_ras)>0,na.rm = T)) #nonzero
length(as.matrix(Yell_ras)[,1])*length(as.matrix(Yell_ras)[1,]) #total cells including NAs
#Cod
Cod_ras1 <- resample(x=Cod_ras, y=r, method="ngb")
plot(Cod_ras)
plot(Cod_ras1)
#see how many zero and nonzero values there are
sum(colSums(as.matrix(Cod_ras1)==0,na.rm = T)) #zero
sum(colSums(as.matrix(Cod_ras1)>0,na.rm = T)) #nonzero
length(as.matrix(Cod_ras1)[,1])*length(as.matrix(Cod_ras1)[1,]) #total cells including NAs
#see how many zero and nonzero values there are
sum(colSums(as.matrix(Cod_ras)==0,na.rm = T)) #zero
sum(colSums(as.matrix(Cod_ras)>0,na.rm = T)) #nonzero
length(as.matrix(Cod_ras)[,1])*length(as.matrix(Cod_ras)[1,]) #total cells including NAs
#Haddock
Had_ras1 <- resample(x=Had_ras, y=r, method="ngb")
plot(Had_ras)
plot(Had_ras1)
#see how many zero and nonzero values there are
sum(colSums(as.matrix(Had_ras1)==0,na.rm = T)) #zero
sum(colSums(as.matrix(Had_ras1)>0,na.rm = T)) #nonzero
length(as.matrix(Had_ras1)[,1])*length(as.matrix(Had_ras1)[1,]) #total cells including NAs
#see how many zero and nonzero values there are
sum(colSums(as.matrix(Had_ras)==0,na.rm = T)) #zero
sum(colSums(as.matrix(Had_ras)>0,na.rm = T)) #nonzero
length(as.matrix(Had_ras)[,1])*length(as.matrix(Had_ras)[1,]) #total cells including NAs
#redefine final objects
Had_mat <- as.matrix(Had_ras1)
Cod_mat <- as.matrix(Cod_ras1)
Yell_mat <- as.matrix(Yell_ras1)
Had_ras <- Had_ras1
Cod_ras <- Cod_ras1
Yell_ras <- Yell_ras1
hab<- list()
hab[["hab"]][["spp1"]] <- Had_mat / sum(Had_mat,na.rm = T) #normalize like MFS does
hab[["hab"]][["spp2"]] <- Cod_mat / sum(Cod_mat, na.rm=T)
hab[["hab"]][["spp3"]] <- Yell_mat / sum(Yell_mat, na.rm=T)
#CREATE HADDOCK STRATA
strata.dir <- "C:\\Users\\benjamin.levy\\Desktop\\NOAA\\GIS_Stuff\\" # strata shape files in this directory
# get the shapefiles
strata.areas <- readOGR(paste(strata.dir,"Survey_strata", sep="")) #readShapePoly is deprecated; use rgdal::readOGR or sf::st_read
#define georges bank
GB_Had_strata_num <- c("01130","01140","01150","01160","01170","01180","01190","01200","01210","01220","01230","01240","01250", "01290", "01300")
#pull out indices corresponding to GB strata
GB_strata_idx <- match(GB_Had_strata_num,strata.areas@data[["STRATUMA"]])
#plot them
#plot(strata.areas[GB_strata_idx,])
#define GB strata as own object
GB_had_strata <- strata.areas[GB_strata_idx,]
plot(GB_had_strata)
#CREATE COD STRATA
#define georges bank
GB_Cod_strata_num <- c("01130","01140","01150","01160","01170","01180","01190","01200","01210","01220","01230","01240","01250")
#pull out indices corresponding to GB strata
GB_strata_idx <- match(GB_Cod_strata_num,strata.areas@data[["STRATUMA"]])
#plot them
#plot(strata.areas[GB_strata_idx,])
#define GB strata as own object
GB_cod_strata <- strata.areas[GB_strata_idx,]
plot(GB_cod_strata)
#CREATE YELLOWTAIL STRATA
#define georges bank
GB_Yel_strata_num <- c("01130","01140","01150","01160","01170","01180","01190","01200","01210")
#pull out indices corresponding to GB strata
GB_strata_idx <- match(GB_Yel_strata_num,strata.areas@data[["STRATUMA"]])
#plot them
#plot(strata.areas[GB_strata_idx,])
#define GB strata as own object
GB_yell_strata <- strata.areas[GB_strata_idx,]
plot(GB_yell_strata)
#ADD "STRATA" list to hab which is used to determine how many total strata there are in Bens_init_survey
hab[["strata"]] <- GB_had_strata@data$FINSTR_ID
#load previously created rasters
#haddock
#Had_ras <- readRDS(file="TestScripts/Habitat_plots/Haddock/Haddock_Weighted_AdaptFalse_RASTER.RDS")
plot(Had_ras)
plot(GB_had_strata,add=T)
#cod
#Cod_ras <- readRDS(file="TestScripts/Habitat_plots/Cod/Cod_Weighted_AdaptFalse_RASTER.RDS")
plot(Cod_ras)
plot(GB_cod_strata,add=T)
#yellowtail
#Yell_ras <- readRDS(file="TestScripts/Habitat_plots/YellowtailFlounder/YellowtailFlounder_Weighted_AdaptFalse_RASTER.RDS")
plot(Yell_ras)
plot(GB_yell_strata,add=T)
###########################################################################
#create matrix with strata number inside each strata (same as hab$stratas)
#HADDOCK
all_had_strat_num <- list()
for(i in seq(length(GB_had_strata))){
GB_strata_idx <- match(GB_had_strata@data[["STRATUMA"]][i],strata.areas@data[["STRATUMA"]])
specific_strata <- strata.areas[GB_strata_idx,]
strat_num <- specific_strata$STR2
#first make everything outside strata 0
x1<- mask(Had_ras,specific_strata,updatevalue=0)
#then make everything inside given strata the strata number
x2<- mask(x1,specific_strata,inverse=TRUE,updatevalue=strat_num)
all_had_strat_num[[i]]<-x2
}
had_stratas <- Reduce('+',all_had_strat_num)
had_stratas<- as.matrix(had_stratas)
fields::image.plot(had_stratas)
#COD
all_cod_strat_num <- list()
for(i in seq(length(GB_cod_strata))){
GB_strata_idx <- match(GB_cod_strata@data[["STRATUMA"]][i],strata.areas@data[["STRATUMA"]])
specific_strata <- strata.areas[GB_strata_idx,]
strat_num <- specific_strata$STR2
#first make everything outside strata 0
x1<- mask(Cod_ras,specific_strata,updatevalue=0)
#then make everything inside given strata the strata number
x2<- mask(x1,specific_strata,inverse=TRUE,updatevalue=strat_num)
all_cod_strat_num[[i]]<-x2
}
cod_stratas <- Reduce('+',all_cod_strat_num)
cod_stratas<- as.matrix(cod_stratas)
fields::image.plot(cod_stratas)
#YELLOWTAIL FLOUNDER
all_yell_strat_num <- list()
for(i in seq(length(GB_yell_strata))){
GB_strata_idx <- match(GB_yell_strata@data[["STRATUMA"]][i],strata.areas@data[["STRATUMA"]])
specific_strata <- strata.areas[GB_strata_idx,]
strat_num <- specific_strata$STR2
#first make everything outside strata 0
x1<- mask(Yell_ras,specific_strata,updatevalue=0)
#then make everything inside given strata the strata number
x2<- mask(x1,specific_strata,inverse=TRUE,updatevalue=strat_num)
all_yell_strat_num[[i]]<-x2
}
yell_stratas <- Reduce('+',all_yell_strat_num)
yell_stratas<- as.matrix(yell_stratas)
fields::image.plot(yell_stratas)
#store values just created
#hab[["stratas"]] <- list(had_stratas,cod_stratas,yell_stratas)
hab[["stratas"]] <- had_stratas #just use haddock because it contains others
###########################################################################
###########################################################################
# NEED TO DEFINE SPAWNING GROUNDS
source("R/create_spawn_hab_Bens.R")
source("R/define_spawn_Bens.R")
#yellowtail in May (weeks 9, 10, 11, 12)
max(hab$hab$spp3,na.rm=T)  #max is 0.0006653
YT_spwn_ind <-which(hab$hab$spp3 >= 0 , arr.ind=T) #4,279 total non NA cells
YT_spwn_ind <-which(hab$hab$spp3 > 0 , arr.ind=T)  #3,110 are >0
YT_spwn_ind <-which(hab$hab$spp3 >= .0006 , arr.ind=T) #832 are above .0006
#will use southwest red area and northeast red area for spawning
#northeast between rows 40-80 and columns 155-196
#use .0002 in NE corner
YT_spwn_ind <-which(hab$hab$spp3 >= .0006 , arr.ind=T) #832 are above .0006
YT_spwn_NE <- YT_spwn_ind[(YT_spwn_ind[,1]>=res_factor*40) & (YT_spwn_ind[,1]<=res_factor*80) & (YT_spwn_ind[,2]>=res_factor*155) & (YT_spwn_ind[,2]<=res_factor*196), ]
#will use southwest red area and northeast red area for spawning
#SW between rows 96 to 127 and columns 50 to 82
#use .0001 in SW corner
YT_spwn_ind <-which(hab$hab$spp3 >= .0004 , arr.ind=T) #3,833 are above .0001
YT_spwn_SW <- YT_spwn_ind[(YT_spwn_ind[,1]>=res_factor*96) & (YT_spwn_ind[,1]<=res_factor*127) & (YT_spwn_ind[,2]>=res_factor*50) & (YT_spwn_ind[,2]<=res_factor*82), ]
YT_spwn <- rbind(YT_spwn_NE,YT_spwn_SW)
spwn_mult <- 10
YT_spwn_hab <- create_spawn_hab_Bens(hab = hab$hab$spp3, spwnareas = YT_spwn, mult = spwn_mult)
fields::image.plot(YT_spwn_hab)
hab[["spwn_hab"]] <- list()
hab[["spwn_hab"]][["spp1"]] <- YT_spwn_hab #CHANGE THIS
hab[["spwn_hab"]][["spp2"]] <- YT_spwn_hab #CHANGE THIS
hab[["spwn_hab"]][["spp3"]] <- YT_spwn_hab
#
#
# #CREATE HABITAT WITH FEWER SPECIES FOR TEST
# temp <- hab
# hab <- list()
# hab[["hab"]] <- temp$hab$spp3
# hab$strata <- temp$strata
# hab$stratas <- temp$stratas
# hab$spwn_hab <- temp$spwn_hab$spp3
saveRDS(hab, file="hab_justYT2.RDS")
#INTEGRATE WITH TEMP GRADIENT
#constant temp gradient
moveCov <- readRDS(file="20 year moveCov matrices/GeorgesBank/GB_22yr_ConstTemp_HaddockStrata")
#add temp tolerances order: had, cod, yellow
moveCov[["spp_tol"]] <- list() #just in case
moveCov[["spp_tol"]] <- list("spp1" = list("mu" = 9, "va" = 4),
"spp2" = list("mu" = 8.75, "va" = 4.25),
"spp3" = list("mu" = 9, "va" = 4) )
View(moveCov)
temp <- moveCov$cov.matrix
?resample
for(i in seq(length(moveCov$cov.matrix))){
moveCov$cov.matrix[[i]] <- resample(x=raster::raster(temp[[i]]), y=r, method="ngb")
}
?raster::raster
for(i in seq(length(moveCov$cov.matrix))){
moveCov$cov.matrix[[i]] <- resample(x=raster::raster(temp[[i]],ext=extent(Yell_ras),crs=crs(Yell_ras)), y=r, method="ngb")
}
extent(Yell_ras)
moveCov$cov.matrix[[i]] <- resample(x=raster::raster(temp[[i]],extent=extent(Yell_ras),crs=crs(Yell_ras)), y=r, method="ngb")
extent=[[extent(Yell_ras)]]
Extent(Yell_ras)
extent(Yell_ras)
moveCov$cov.matrix[[i]] <- resample(x=raster::raster(temp[[i]],ext=extent(Yell_ras),crs=crs(Yell_ras)), y=r, method="ngb")
moveCov$cov.matrix[[i]] <- resample(x=raster::raster(temp[[i]],crs=crs(Yell_ras)), y=r, method="ngb")
library(MixFishSim)
library(raster)
#read into GB temp data
WeeklyTempData <- readRDS(file="TestScripts/FVCOM_GB/YearlyTemp_GB.RDS")
#read into GB temp data
WeeklyTempData <- readRDS(file="C:\Users\benjamin.levy\Desktop\Github\READ-PDB-blevy2-toy\TestScripts/FVCOM_GB/YearlyTemp_GB.RDS")
#read into GB temp data
WeeklyTempData <- readRDS(file="C:\\Users\\benjamin.levy\\Desktop\\Github\\READ-PDB-blevy2-toy\\TestScripts\\FVCOM_GB\\YearlyTemp_GB.RDS")
View(WeeklyTempData)
extent(WeeklyTempData$`05`
)
extent(WeeklyTempData$`05`[[1]])
#resample temp gradients in same way as habitat maps
res_factor <- .65
r <- raster(extent(WeeklyTempData$`05`[[1]]), nrow = round(res_factor*nrow(WeeklyTempData$`05`[[1]])), ncol = round(res_factor*ncol(WeeklyTempData$`05`[[1]])) , crs = crs(WeeklyTempData$`05`[[1]]))
nrow(r)
temp <- moveCov$cov.matrix
temp <- WeeklyTempData
