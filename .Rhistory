print(cov_direct)
#ABSOLUTE SUM
#calculate SPRING VAST error from each iteration
#set as 99 and then override if possible
VAST_Model_error[[s]][[cov_direct]][[noise]][[folder]][["spring"]] <- 99
try(VAST_Model_error[[s]][[cov_direct]][[noise]][[folder]][["spring"]] <- sum(abs(model_spring- VAST_est[[s]][[cov_direct]][[noise]][[folder]][["spring"]][,"Estimate"] )) / sum(abs(model_spring )),silent=TRUE)
VAST_Model_error[[s]][[cov_direct]][[noise]][[folder]][["fall"]] <- 99
#calculate FALL VAST error from each iteration
try(VAST_Model_error[[s]][[cov_direct]][[noise]][[folder]][["fall"]] <- sum(abs(model_fall- VAST_est[[s]][[cov_direct]][[noise]][[folder]][["fall"]][,"Estimate"] )) / sum(abs(model_fall )),silent=TRUE)
#calculate SPRING SRS error from each iteration
SRS_Model_error[[s]][[cov_direct]][[noise]][[folder]][["spring"]] <- sum(abs(model_spring- SRS_data1[[s]][[cov_direct]][[noise]][[folder]][["spring"]][,"mean.yr.absolute"] )) / sum(abs(model_spring ))
#calculate FALL SRS error from each iteration
SRS_Model_error[[s]][[cov_direct]][[noise]][[folder]][["fall"]] <- sum(abs(model_fall- SRS_data1[[s]][[cov_direct]][[noise]][[folder]][["fall"]][,"mean.yr.absolute"] )) / sum(abs(model_fall ))
#store VAST stuff to plot later
#first load a blank version and override if possible
VAST_data[[s]][[cov_direct]][[noise]][[folder]] <- readRDS(file = paste0(orig.dir,"/VAST/zero_VAST_est.RDS",sep="") )
#for decpop_contemp
#if(((!((s=="Cod"&folder=="obsmodel6")|(s=="Had"&folder=="obsmodel6"))))){ try(VAST_data[[s]][[folder]] <-  rbind(VAST_est[[s]][[folder]][["spring"]],VAST_est[[s]][[folder]][["fall"]]),silent=TRUE)}
#if vast estimate for each season, use them
if((length(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["fall"]][1,])>2)&(length(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["spring"]][1,])>2)){VAST_data[[s]][[cov_direct]][[noise]][[folder]] <-  rbind(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["spring"]],VAST_est[[s]][[cov_direct]][[noise]][[folder]][["fall"]])}
#if missing one, use zeros in one and the estimate for the other
if((length(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["fall"]][1,])==2)&(length(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["spring"]][1,])>2)){VAST_data[[s]][[cov_direct]][[noise]][[folder]]<-  rbind(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["spring"]],VAST_data[[s]][[cov_direct]][[noise]][[folder]][VAST_data[[s]][[cov_direct]][[noise]][[folder]][,"season"]==2,] )}
if((length(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["fall"]][1,])>2)&(length(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["spring"]][1,])==2)){VAST_data[[s]][[cov_direct]][[noise]][[folder]]<-  rbind(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["fall"]],VAST_data[[s]][[cov_direct]][[noise]][[folder]][VAST_data[[s]][[cov_direct]][[noise]][[folder]][,"season"]==1,] )}
SRS_data[[s]][[cov_direct]][[noise]][[folder]] <- rbind(SRS_data1[[s]][[cov_direct]][[noise]][[folder]][["spring"]],SRS_data1[[s]][[cov_direct]][[noise]][[folder]][["fall"]])
}
}
long_names <- c("Yellowtail Flounder", "Atlantic Cod", "Haddock")
#NEW WAY PLOTTING 3 TOGETHER ON SAME PAGE
# #field config settings for plotting
# FC_fall = c(FC_settings[[s]]$fall[folder,1],FC_settings[[s]]$fall[folder,2],FC_settings[[s]]$fall[folder,3],FC_settings[[s]]$fall[folder,4])
# FC_spring = c(FC_settings[[s]]$spring[folder,1],FC_settings[[s]]$spring[folder,2],FC_settings[[s]]$spring[folder,3],FC_settings[[s]]$spring[folder,4])
#
#store each obsmodel plot
Obsmodel_plot[[s]][[cov_direct]][[noise]][[folder]] <- ggplot() +
#this way plots data by season
geom_point(data = subset(as.data.frame(pop_by_season[[s]]),year>=year_min), aes(x=as.numeric(year),y=biomass, group = season, color = "Model"),size=3) +
geom_line(data = subset(as.data.frame(pop_by_season[[s]]),year>=year_min), aes(x=as.numeric(year),y=biomass, group =season, color = "Model"),size=1) +
#plot VAST estimate without covariates with NO noise
geom_errorbar(data=subset(VAST_data[[s]][["_NoCovs_"]][["NoNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season,ymin=Estimate-(1.96*Std..Error.for.Estimate), ymax=Estimate+(1.96*Std..Error.for.Estimate), color = "VAST No Cov No Noise"),width=.3) +
#geom_linerange(data=subset(VAST_data[[s]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season,ymin=Estimate-(1.96*Std..Error.for.Estimate), ymax=Estimate+(1.96*Std..Error.for.Estimate), color = "VAST Estimate")) +
geom_point(data=subset(VAST_data[[s]][["_NoCovs_"]][["NoNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season, color = "VAST No Cov No Noise"),size=2)+
geom_line(data=subset(VAST_data[[s]][["_NoCovs_"]][["NoNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season, color = "VAST No Cov No Noise"))+
#plot VAST estimate without covariates with WITH noise
geom_errorbar(data=subset(VAST_data[[s]][["_NoCovs_"]][["WithNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season,ymin=Estimate-(1.96*Std..Error.for.Estimate), ymax=Estimate+(1.96*Std..Error.for.Estimate), color = "VAST No Cov W Noise"),width=.3) +
#geom_linerange(data=subset(VAST_data[[s]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season,ymin=Estimate-(1.96*Std..Error.for.Estimate), ymax=Estimate+(1.96*Std..Error.for.Estimate), color = "VAST Estimate")) +
geom_point(data=subset(VAST_data[[s]][["_NoCovs_"]][["WithNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season, color = "VAST No Cov W Noise"),size=2)+
geom_line(data=subset(VAST_data[[s]][["_NoCovs_"]][["WithNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season, color = "VAST No Cov W Noise"))+
#plot VAST estimate with covariates with NO noise
geom_errorbar(data=subset(VAST_data[[s]][["_WithCov_"]][["NoNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season,ymin=Estimate-(1.96*Std..Error.for.Estimate), ymax=Estimate+(1.96*Std..Error.for.Estimate), color = "VAST w Cov No Noise"),width=.3) +
#geom_linerange(data=subset(VAST_data[[s]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season,ymin=Estimate-(1.96*Std..Error.for.Estimate), ymax=Estimate+(1.96*Std..Error.for.Estimate), color = "VAST Estimate")) +
geom_point(data=subset(VAST_data[[s]][["_WithCov_"]][["NoNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season, color = "VAST w Cov No Noise"))+
geom_line(data=subset(VAST_data[[s]][["_WithCov_"]][["NoNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season, color = "VAST w Cov No Noise"))+
#plot VAST estimate with covariates WITH noise
geom_errorbar(data=subset(VAST_data[[s]][["_WithCov_"]][["WithNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season,ymin=Estimate-(1.96*Std..Error.for.Estimate), ymax=Estimate+(1.96*Std..Error.for.Estimate), color = "VAST w Cov w Noise"),width=.3) +
#geom_linerange(data=subset(VAST_data[[s]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season,ymin=Estimate-(1.96*Std..Error.for.Estimate), ymax=Estimate+(1.96*Std..Error.for.Estimate), color = "VAST Estimate")) +
geom_point(data=subset(VAST_data[[s]][["_WithCov_"]][["WithNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season, color = "VAST w Cov w Noise"))+
geom_line(data=subset(VAST_data[[s]][["_WithCov_"]][["WithNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season, color = "VAST w Cov w Noise"))+
#plot stratified calculation data with NO noise
geom_errorbar(data=as.data.frame(SRS_data[[s]][["_WithCov_"]][["NoNoise_"]][[folder]]),aes(x=year,y=mean.yr.absolute,group=season,ymin=mean.yr.absolute-(1.96*sd.mean.yr.absolute), ymax=mean.yr.absolute+(1.96*sd.mean.yr.absolute), color = "Strat Mean No Noise"),width=.3) +
# geom_linerange(data=as.data.frame(SRS_data[[s]][[folder]]),aes(x=year,y=mean.yr.absolute,group=season,ymin=mean.yr.absolute-(1.96*sd.mean.yr.absolute), ymax=mean.yr.absolute+(1.96*sd.mean.yr.absolute), color = "Stratified Mean")) +
geom_point(data=as.data.frame(SRS_data[[s]][["_WithCov_"]][["NoNoise_"]][[folder]]),aes(x=year,y=mean.yr.absolute,group=season, color = "Strat Mean No Noise"))+
geom_line(data=as.data.frame(SRS_data[[s]][["_WithCov_"]][["NoNoise_"]][[folder]]),aes(x=year,y=mean.yr.absolute,group=season, color = "Strat Mean No Noise"))+
#plot stratified calculation data with NO noise
geom_errorbar(data=as.data.frame(SRS_data[[s]][["_WithCov_"]][["WithNoise_"]][[folder]]),aes(x=year,y=mean.yr.absolute,group=season,ymin=mean.yr.absolute-(1.96*sd.mean.yr.absolute), ymax=mean.yr.absolute+(1.96*sd.mean.yr.absolute), color = "Strat Mean W Noise"),width=.3) +
# geom_linerange(data=as.data.frame(SRS_data[[s]][[folder]]),aes(x=year,y=mean.yr.absolute,group=season,ymin=mean.yr.absolute-(1.96*sd.mean.yr.absolute), ymax=mean.yr.absolute+(1.96*sd.mean.yr.absolute), color = "Stratified Mean")) +
geom_point(data=as.data.frame(SRS_data[[s]][["_WithCov_"]][["WithNoise_"]][[folder]]),aes(x=year,y=mean.yr.absolute,group=season, color = "Strat Mean W Noise"))+
geom_line(data=as.data.frame(SRS_data[[s]][["_WithCov_"]][["WithNoise_"]][[folder]]),aes(x=year,y=mean.yr.absolute,group=season, color = "Strat Mean W Noise"))+
facet_wrap(~ season, ncol =1) +
# labs(x="year",y="Biomass", title = paste(folder,"  SeV=",round(VAST_Model_error[[s]][[folder]][["spring"]],digits=2),
#                                          "  FC=", toString(FC_spring),
#                                          "  SeSM=",round(SRS_Model_error[[s]][[folder]][["spring"]],digits=2),
#                                          "  FeV=",round(VAST_Model_error[[s]][[folder]][["fall"]],digits=2),
#                                          "  FC=", toString(FC_fall),
#                                          "  FeSM=",round(SRS_Model_error[[s]][[folder]][["fall"]],digits=2),sep=""), color ="" )
labs(x="year",y="Biomass", title = paste(paste(s," ",folder,sep=""), "\n", #new line
paste(" V.NC.NN=",round(VAST_Model_error[[s]][["_NoCovs_"]][["NoNoise_"]][[folder]][["spring"]],digits=2),
"   V.NC.YN=",round(VAST_Model_error[[s]][["_NoCovs_"]][["WithNoise_"]][[folder]][["spring"]],digits=2),
" V.YC.NN=",round(VAST_Model_error[[s]][["_WithCov_"]][["NoNoise_"]][[folder]][["spring"]],digits=2),
"   V.YC.YN=",round(VAST_Model_error[[s]][["_WithCov_"]][["WithNoise_"]][[folder]][["spring"]],digits=2),
"  SM.NN=",round(SRS_Model_error[[s]][["_NoCovs_"]][["NoNoise_"]][[folder]][["spring"]],digits=2),
"  SM.YN=",round(SRS_Model_error[[s]][["_NoCovs_"]][["WithNoise_"]][[folder]][["spring"]],digits=2),sep=""), "\n", #new line
paste(" V.NC.NN=",round(VAST_Model_error[[s]][["_NoCovs_"]][["NoNoise_"]][[folder]][["fall"]],digits=2),
"   V.NC.YN=",round(VAST_Model_error[[s]][["_NoCovs_"]][["WithNoise_"]][[folder]][["fall"]],digits=2),
" V.YC.NN=",round(VAST_Model_error[[s]][["_WithCov_"]][["NoNoise_"]][[folder]][["fall"]],digits=2),
"   V.YC.YN=",round(VAST_Model_error[[s]][["_WithCov_"]][["WithNoise_"]][[folder]][["fall"]],digits=2),
"  SM.NN=",round(SRS_Model_error[[s]][["_NoCovs_"]][["NoNoise_"]][[folder]][["fall"]],digits=2),
"  SM.YN=",round(SRS_Model_error[[s]][["_NoCovs_"]][["WithNoise_"]][[folder]][["fall"]],digits=2),sep=""),sep=""), color ="" )+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12),
title=element_text(size=8))
#one plot per page
print(Obsmodel_plot[[s]][[cov_direct]][[noise]][[folder]])
# for more than one plot per page
# gridExtra::grid.arrange(Obsmodel_plot[[1]],Obsmodel_plot[[2]],Obsmodel_plot[[3]],nrow=3)
# gridExtra::grid.arrange(Obsmodel_plot[[4]],Obsmodel_plot[[5]],Obsmodel_plot[[6]],nrow=3)
}
}
dev.off()
exclude_strata <- FALSE
#for getting into correct subfolder
ifelse(exclude_strata==TRUE,
{str_dir <- "ExcludeStrata"},
{str_dir <- "AllStrata"})
#############################################################################################
# #save the list_all with the correct surveys from good_iter
# result_goodones <- list()
# result_goodones[[good_iter[[1]]]] <- result[[good_iter[[1]]]]
# result_goodones[[good_iter[[2]]]] <- result[[good_iter[[2]]]]
# result_goodones[[good_iter[[3]]]] <- result[[good_iter[[3]]]]
# saveRDS(result_goodones,file = paste("E:\\READ-PDB-blevy2-MFS2\\GB_Results\\",scenario1,"\\result_goodones_",scenario1,".RDS",sep=""))
#############################################################################################
#############################################################################################
#spp1 spp2 spp3
#short_names <- c("YT","Cod","Had")   #fixed above
short_names <- c("YT","Had")
#strata that each species occupies. Used to calculate stratified random mean of each
strata_species <- list()
strata_species[["YT"]] <-  c(13,14,15,16,17,18,19,20,21)
strata_species[["Cod"]] <- c(13,14,15,16,17,18,19,20,21,22,23,24,25)
strata_species[["Had"]] <- c(13,14,15,16,17,18,19,20,21,22,23,24,25,29,30)
##################################################################################################
setwd(orig.dir)
#ADD TRUE MODEL POPULATION VALUES TO SURVEY DATA TABLES
#ALSO ADD LAT LON LOCATIONS TO TABLE AS WELL
library(raster)
library(sp)
library(TMB)
library(VAST)
library(dplyr)
library(ggplot2)
#read in habitat matrix
hab <- readRDS(file="hab_GB_3species.RDS") #courser resolution
#read in GB strata
#haddock contains all stratas used
Had_ras <- readRDS(file="TestScripts/Habitat_plots/Haddock/Had_Weighted_AdaptFalse_RASTER_res2.RDS")
#plot(Had_ras)
#translate habitat matrix back into raster
hab_ras <-raster(hab$hab$spp3)
extent(hab_ras) <- extent(Had_ras)
#plot(hab_ras)
for(iter in seq(length(list_all))){
print(iter)
temp <- matrix(data=0,nrow=length(list_all[[iter]][,1]),ncol=n_spp)
lat <- vector()
lon <- vector()
for(samp in seq(length(list_all[[iter]][,1]))){
#ADDING TRUE POPULATION
x = as.numeric(list_all[[iter]][samp,2]) #x in second column
y = as.numeric(list_all[[iter]][samp,3]) #y in third column
wk = as.numeric(list_all[[iter]][samp,11]) #week in 11th column
yr = as.numeric(list_all[[iter]][samp,7]) #year in 7th column
temp[samp,1] <- sum(result[[good_iter[iter]]]$pop_bios[[(wk+(52*(yr-1)))]][["spp1"]],na.rm=T) #YT is spp1
temp[samp,2] <- sum(result[[good_iter[iter]]]$pop_bios[[(wk+(52*(yr-1)))]][["spp2"]],na.rm=T) #Cod is spp2
temp[samp,3] <- sum(result[[good_iter[iter]]]$pop_bios[[(wk+(52*(yr-1)))]][["spp3"]],na.rm=T) #Had is spp3
#ADDING LAT LON LOCATIONS
rw <- as.numeric(list_all[[iter]][samp,"x"])  #x in col 2
cl <- as.numeric(list_all[[iter]][samp,"y"]) #y in col 3
lon[samp] <- xFromCol(hab_ras, col = cl)
lat[samp] <- yFromRow(hab_ras, row = rw)
}
temp <- cbind(temp,lat,lon)
colnames(temp) <- c("YT","Cod","Had","Latitude","Longitude")
list_all[[iter]] <- cbind(list_all[[iter]],temp)
colnames(list_all[[iter]]) <- c("station_no","x","y","stratum","day","tow","year","YT_samp","Cod_samp","Had_samp","week","Season","YT_pop","Cod_pop","Had_pop","Lat","Lon")
}
#SAVE INDIVIDUAL LIST_ALL AS THEY COME OUT SO DONT HAVE TO REDO THEM
#saveRDS(list_all,paste("list_all_more_",scenario,".RDS",sep=""))
#FIND MEAN VALUE BY SEASON USING ABOVE INFORMATION. USE MEAN OF TWO SURVEY WEEKS FOR EACH SEASON
season_wks <- list(c(13,14),c(37,38))
pop_by_season <- list()
for(iter in seq(length(list_all))){
for(s in short_names){
temp <- data.frame()
idx <- 1
for(yr in seq(3,22)){
for(season in seq(2)){
temp[idx,1] <- yr
temp[idx,2] <- season
#use values in given year for weeks in specified season. only use single strata because entire population summarized in each strata in above loop
temp[idx,3] <- mean(as.numeric(list_all[[iter]][((as.numeric(list_all[[iter]][,"year"]==yr)) & (as.numeric(list_all[[iter]][,"week"]) %in% season_wks[[season]]) & (as.numeric(list_all[[iter]][,"stratum"]==29)) ),paste(s,"_pop",sep="")]))
idx <- idx + 1
}
}
colnames(temp) <- c("year","season","biomass")
pop_by_season[[s]][[iter]] <- temp
}
}
pop_by_season[["YT"]] <- pop_by_season[["YT"]][[1]]  #YT should be first in list_all
pop_by_season[["Cod"]] <- pop_by_season[["Cod"]][[2]] #Cod should be second in list_all
pop_by_season[["Had"]] <- pop_by_season[["Had"]][[3]] #Had should be third in list_all
##########################################################################################
#NOW WE NEED TO CREATE A STRATIFIED MEAN FROM EACH OF THESE SAMPLES (WITH AND WITHOUT NOISE)
##########################################################################################
#choose some strata to exclude, if desired
#George's Bank Setup by species
#YT            Cod          Haddock
exclude <- list()
ifelse(exclude_strata==TRUE,
{exclude[["YT"]] <- c(13,14,15,17,18)
exclude[["Cod"]] <- c(23,24,25)
exclude[["Had"]] <- c(23,24,25,29,30)},
{exclude[["YT"]] <- c(0)
exclude[["Cod"]] <- c(0)
exclude[["Had"]] <- c(0)})
setwd(orig.dir)
#BELOW WILL TAKE A MINUTE
#there are #strata * #iterations * #samp_per_iter total samples
#I AM COPYING FROM CALC_SRS_INDEX_SURVEY_BENS, which was adapted from Liz's code to create below
library(tibble)
library(ggplot2)
library(plyr)
library(dplyr)
library(tidyr)
library(readr)
library(here)
#stop output from below using this option
options(dplyr.summarise.inform = FALSE)
#load file to calculate the stratified mean
source("TestScripts/Calc_strat_mean/fn_srs_survey_BENS.R")
#setup dimensions for each species- 1 for each strata
strat_mean_all <- vector("list",length(seq(n_spp)))
for(s in short_names){
strat_mean_all[[s]] <- vector("list",length(list_all))
}
#go through each strata survey, iteration, sample
# calculate SRS estimates ====
for(noise in c("NoNoise_", "WithNoise_")){
for(iter in seq(length(list_all))){
print(iter)
#if any NA columns make them zero
list_all[[iter]][is.na(list_all[[iter]])]=0
for(s in short_names){
#DEFINE INDIVIDUAL STRATUM AREAS
stratum <- sort(unique(surv_random$log.mat[,4]))
STRATUM_AREA <- na.omit(surv_random$cells_per_strata) # old way: rep(10000/nstrata,nstrata) #100x100 grid so each corner has area 2500
sv.area <- as_tibble(data.frame(stratum,STRATUM_AREA))
#remove stratum that species does not occupy
sv.area <- sv.area[(sv.area$stratum %in% strata_species[[s]]),]#sv.area %>% slice(-exclude)
#remove strata to exclude from stratified mean calculation
sv.area <- sv.area[!(sv.area$stratum %in% exclude[[s]]),]#sv.area %>% slice(-exclude)
spp <- as_tibble(list_all[[iter]],header=T) #pull out entire survey matrix
##remove strata to exclude from stratified mean calculation
spp <- spp[(spp$stratum %in% strata_species[[s]]),]
spp <- spp[!(spp$stratum %in% exclude[[s]]),]
spp$year <- as.numeric(spp$year)
#add noise to survey and overwrite existing noise, if it exists
if(noise=="WithNoise_"){
print("ADDING NOISE TO DATA")
#add noise to correct column
#YTF
if(s=="YT"){ temp_noise <-  sapply(as.numeric(spp$YT_samp) , function(x){rlnorm(1,mean=log(x),sdlog=.35)} ) }
#Cod
if(s=="Cod"){ temp_noise <-  sapply(as.numeric(spp$Cod_samp) , function(x){rlnorm(1,mean=log(x),sdlog=.35)} ) }
#Had
if(s=="Had"){temp_noise <-  sapply(as.numeric(spp$Had_samp) , function(x){rlnorm(1,mean=log(x),sdlog=.35)} ) }
#this didnt work because it was still a data table
#temp_noise <-  sapply(as.vector(spp$c(paste(short_names[s],"_samp",sep=""))) , function(x){rlnorm(1,mean=log(x),sdlog=.35)} )
try(temp_noise <- readRDS(paste0(getwd(),"/VAST/",scenario,"/",s,"/",str_dir,"_NoCovs_",noise,"/adios.RDS",sep="")) )
#if try worked above it will be a data table, if not it will be a vector
#YTF
if(s=="YT"){ ifelse(is.vector(temp_noise),spp$YT_samp <- temp_noise, spp$YT_samp <- temp_noise$YTF) }
#Cod
if(s=="Cod"){ ifelse(is.vector(temp_noise),spp$Cod_samp <- temp_noise, spp$Cod_samp <- temp_noise$Cod) }
#Had
if(s=="Had"){ ifelse(is.vector(temp_noise),spp$Had_samp <- temp_noise, spp$Had_samp <- temp_noise$Had) }
}
# get total area of stock ====
spp.strata <- unique(spp$stratum)
spp.strata <- as.numeric(spp.strata)
spp.area <- sum(sv.area$STRATUM_AREA[sv.area$stratum %in% spp.strata]) #TOTAL AREA OF ALL STRATA
temp <- srs_survey(df=spp, sa=sv.area, str=NULL, ta=1, sppname = paste0(s,"_samp", sep="")  )   # if strata=NULL, the function will use the unique strata set found in df
# View(temp)
strat_mean_all[[s]][[noise]][[iter]] <- temp %>%
mutate(mean.yr.absolute=mean.yr*spp.area, sd.mean.yr.absolute=sd.mean.yr*spp.area,
CV.absolute=sd.mean.yr.absolute/mean.yr.absolute) # if strata=NULL, the function will use the unique strata set found in df
strat_mean_all[[s]][[noise]][[iter]] <- data.matrix(strat_mean_all[[s]][[noise]][[iter]])
colnames(strat_mean_all[[s]][[noise]][[iter]]) <- c("year","mean.yr","var.mean.yr","sd.mean.yr","CV","season","mean.yr.absolute","sd.mean.yr.absolute","CV.absolute")
}
}
strat_mean_all[["YT"]][[noise]] <- strat_mean_all[["YT"]][[noise]][[1]]  #YT should be first in list_all
strat_mean_all[["Cod"]][[noise]] <- strat_mean_all[["Cod"]][[noise]][[2]] #Cod should be second in list_all
strat_mean_all[["Had"]][[noise]] <- strat_mean_all[["Had"]][[noise]][[3]] #Had should be third in list_all
}
#initial scenario folder
dir.create( paste0(getwd(),"/VAST/",scenario)) #create folder to store upcoming subfolders
ifelse(exclude_strata==TRUE, strat_ex <- "excludestrata", strat_ex <- "allstrata")
saveRDS(strat_mean_all,paste0(getwd(),"/VAST/",scenario,"/strat_mean_all_",scenario1,"_",strat_ex,".RDS"))
#load VAST fit index approximation, measure error with true value, store
#individual strata limits
# strata.limits <- list()
# strata.limits[["YT"]] <- data.frame(Georges_Bank = c(1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1210)) #THESE ARE YTF STRATA
# strata.limits[["Cod"]] <- data.frame(Georges_Bank = c(1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1210, 1220, 1230, 1240, 1250)) #THESE ARE COD STRATA
# strata.limits[["Had"]] <- data.frame(Georges_Bank = c(1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1210, 1220, 1230, 1240, 1250, 1290, 1300)) #THESE ARE HAD STRATA
#What I tested for all of them, but they dont always work in each scenario
model_types <- list()
model_types[["YT"]] <- c("obsmodel7")
model_types[["Cod"]] <- c("obsmodel7")
model_types[["Had"]] <- c("obsmodel7")
#model_types[["YT"]] <- c("obsmodel5","obsmodel6")
#model_types[["Cod"]] <- c("obsmodel1","obsmodel2","obsmodel5","obsmodel6")
#model_types[["Had"]] <- c("obsmodel1","obsmodel2","obsmodel5","obsmodel6")
#Use these for IncPop_IncTemp
# model_types <- list()
# model_types[["YT"]] <- c("obsmodel5","obsmodel6")
# model_types[["Cod"]] <- c("obsmodel2","obsmodel5") #,"obsmodel6" didnt work
# model_types[["Had"]] <- c("obsmodel1")
# ifelse(exclude_strata==TRUE,
# {model_types[["YT"]] <- c("obsmodel5","obsmodel6")
# model_types[["Cod"]] <- c("obsmodel1","obsmodel2","obsmodel5") #,"obsmodel6" didnt work
# model_types[["Had"]] <- c("obsmodel1","obsmodel2","obsmodel5","obsmodel6")},
# {model_types[["YT"]] <- c("obsmodel1","obsmodel2","obsmodel3","obsmodel4","obsmodel5","obsmodel6")
# model_types[["Cod"]] <- c("obsmodel1","obsmodel2","obsmodel3","obsmodel4","obsmodel5","obsmodel6")
# model_types[["Had"]] <- c("obsmodel1","obsmodel2","obsmodel3","obsmodel4","obsmodel5","obsmodel6")}
# )
Model_settings <- list()
Model_AIC <- list()
SRS_data_all <- list()
SRS_data1 <- list()
VAST_Model_error <- list()
SRS_Model_error <- list()
VAST_fit <- list()
VAST_est <- list()
# #old fc settings
# FC_settings[["YT"]][[cov_direct]][["spring"]] <- data.frame(row.names = model_types[["YT"]])
# FC_settings[["YT"]][[cov_direct]][["fall"]] <- data.frame(row.names = model_types[["YT"]])
# FC_settings[["Cod"]][[cov_direct]][["spring"]] <- data.frame(row.names = model_types[["Cod"]])
# FC_settings[["Cod"]][[cov_direct]][["fall"]] <- data.frame(row.names = model_types[["Cod"]])
# FC_settings[["Had"]][[cov_direct]][["spring"]] <- data.frame(row.names = model_types[["Had"]])
# FC_settings[["Had"]][[cov_direct]][["fall"]] <- data.frame(row.names = model_types[["Had"]])
FC_settings <- list(vector("list", length(short_names)))
names(FC_settings) <- short_names
#initial scenario folder
setwd( paste0(orig.dir,"/VAST/",scenario,sep="")) #create folder to store upcoming subfolders
for(s in short_names){
for(folder in model_types[[s]]){
print(folder)
#old way for pre-paper vast runs
#for(cov_directory in c("", paste("_with_",cov_used,sep=""))){
#ifelse(cov_directory==c(""), cov_direct<-"No_Cov", cov_direct <- cov_directory)
#new way with vast runs for paper
for(cov_directory in c("_NoCovs_", "_WithCov_")){
for(noise in c("NoNoise_", "WithNoise_")){
cov_direct<- cov_directory
print(cov_direct)
FC_settings[[s]] <- vector("list", length= 2) #with and without covariates
names(FC_settings[[s]]) <- c("_NoCovs_","_WithCov_")
FC_settings[[s]][[cov_direct]][[noise]][["spring"]] <- data.frame(row.names = model_types[[s]])
FC_settings[[s]][[cov_direct]][[noise]][["fall"]] <- data.frame(row.names = model_types[[s]])
for(sn in c("spring","fall")){
try(fit <- readRDS(paste0(getwd(),"/",s,"/",str_dir,cov_directory,noise,"/",folder,"/",sn,"/fit_",sn,".RDS")),silent=TRUE)
#set FC settings as N and then override them, if possible
FC_settings[[s]][[cov_direct]][[noise]][[sn]][folder,1] <- "N"
FC_settings[[s]][[cov_direct]][[noise]][[sn]][folder,2] <- "N"
FC_settings[[s]][[cov_direct]][[noise]][[sn]][folder,3] <- "N"
FC_settings[[s]][[cov_direct]][[noise]][[sn]][folder,4] <- "N"
try(FC_settings[[s]][[cov_direct]][[noise]][[sn]][folder,1] <- fit$settings$FieldConfig[[1]],silent=TRUE)
try( FC_settings[[s]][[cov_direct]][[noise]][[sn]][folder,2] <- fit$settings$FieldConfig[[2]],silent=TRUE)
try( FC_settings[[s]][[cov_direct]][[noise]][[sn]][folder,3] <- fit$settings$FieldConfig[[3]],silent=TRUE)
try(FC_settings[[s]][[cov_direct]][[noise]][[sn]][folder,4] <- fit$settings$FieldConfig[[4]],silent=TRUE)
try(VAST_fit[[s]][[cov_direct]][[noise]][[folder]][[sn]] <-  read.csv(paste0(getwd(),"/",s,"/",str_dir,cov_directory,noise,"/",folder,"/",sn,"/Index.csv"), header=T),silent=TRUE)
#pull out strat mean calc
SRS_data_all[[s]][[cov_direct]][[noise]][[folder]][["spring"]] <- strat_mean_all[[s]][[noise]][strat_mean_all[[s]][[noise]][,"season"]==1,]
SRS_data_all[[s]][[cov_direct]][[noise]][[folder]][["fall"]] <- strat_mean_all[[s]][[noise]][strat_mean_all[[s]][[noise]][,"season"]==2,]
ifelse(sn == "spring",
#add year & season to these
{Year <-  seq(years_cut+1,years_sim)
season <- rep(1,years_sim-years_cut)},
{Year <-  seq(years_cut+1,years_sim)
season <- rep(2,years_sim-years_cut)})
try(VAST_est[[s]][[cov_direct]][[noise]][[folder]][[sn]] <- cbind(VAST_fit[[s]][[cov_direct]][[noise]][[folder]][[sn]],Year,season),silent=TRUE)
SRS_data1[[s]][[cov_direct]][[noise]][[folder]][[sn]] <- SRS_data_all[[s]][[cov_direct]][[noise]][[folder]][[sn]][,c("mean.yr.absolute","year","season","sd.mean.yr.absolute")]
try(Model_AIC[[s]][[cov_direct]][[noise]][[sn]][[folder]] <- fit$parameter_estimates$AIC,silent=TRUE)
try(Model_settings[[s]][[cov_direct]][[noise]][[sn]][[folder]] <- read.delim(paste0(getwd(),"/",s,"/",str_dir,cov_directory,noise,"/",folder,"/",sn,"/settings.txt",sep="")),silent=TRUE)
try(remove(fit),silent=TRUE)
}
}
}
}
colnames(FC_settings[[s]][[cov_direct]][[noise]][["spring"]]) <- c("Omega1","Epsilon1","Omega2","Epsilon2")
colnames(FC_settings[[s]][[cov_direct]][[noise]][["fall"]]) <- c("Omega1","Epsilon1","Omega2","Epsilon2")
}
#All (potentially) species
pdf(file=paste(getwd(),"/",scenario1,"_",str_dir,".pdf",sep=""))
#Just YT
#pdf(file=paste(getwd(),"/YT/",scenario1,"_",str_dir,"_YT.pdf",sep=""))
year_min <- 2 #in case you dont want to plot all of the years
VAST_data <- list()
SRS_data <- list()
Obsmodel_plot <- list()
#plot stratified calculation and population estimate on same plot
#first make model output have 2 seasons to match the stratified mean calcs
for(s in short_names){ #LIST_ALL WILL BE LENGTH 3 FROM ABOVE
for(folder in model_types[[s]]){
#MODEL VALUES
model_spring = pop_by_season[[s]][pop_by_season[[s]]$season==1,"biomass"]
model_fall = pop_by_season[[s]][pop_by_season[[s]]$season==2,"biomass"]
for(cov_directory in c("_NoCovs_", "_WithCov_")){
for(noise in c("NoNoise_", "WithNoise_")){
cov_direct<- cov_directory
# 2NORM
#   #calculate SPRING VAST error from each iteration
#   VAST_Model_error[[s]][[folder]][["spring"]] <- norm(model_spring- VAST_est[[s]][[folder]][["spring"]][,"Estimate"] , type="2") / norm(model_spring , type ="2")
#
#   #calculate FALL VAST error from each iteration
#   VAST_Model_error[[s]][[folder]][["fall"]] <- norm(model_fall- VAST_est[[s]][[folder]][["fall"]][,"Estimate"] , type="2") / norm(model_fall , type ="2")
print(s)
print(folder)
print(cov_direct)
#ABSOLUTE SUM
#calculate SPRING VAST error from each iteration
#set as 99 and then override if possible
VAST_Model_error[[s]][[cov_direct]][[noise]][[folder]][["spring"]] <- 99
try(VAST_Model_error[[s]][[cov_direct]][[noise]][[folder]][["spring"]] <- sum(abs(model_spring- VAST_est[[s]][[cov_direct]][[noise]][[folder]][["spring"]][,"Estimate"] )) / sum(abs(model_spring )),silent=TRUE)
VAST_Model_error[[s]][[cov_direct]][[noise]][[folder]][["fall"]] <- 99
#calculate FALL VAST error from each iteration
try(VAST_Model_error[[s]][[cov_direct]][[noise]][[folder]][["fall"]] <- sum(abs(model_fall- VAST_est[[s]][[cov_direct]][[noise]][[folder]][["fall"]][,"Estimate"] )) / sum(abs(model_fall )),silent=TRUE)
#calculate SPRING SRS error from each iteration
SRS_Model_error[[s]][[cov_direct]][[noise]][[folder]][["spring"]] <- sum(abs(model_spring- SRS_data1[[s]][[cov_direct]][[noise]][[folder]][["spring"]][,"mean.yr.absolute"] )) / sum(abs(model_spring ))
#calculate FALL SRS error from each iteration
SRS_Model_error[[s]][[cov_direct]][[noise]][[folder]][["fall"]] <- sum(abs(model_fall- SRS_data1[[s]][[cov_direct]][[noise]][[folder]][["fall"]][,"mean.yr.absolute"] )) / sum(abs(model_fall ))
#store VAST stuff to plot later
#first load a blank version and override if possible
VAST_data[[s]][[cov_direct]][[noise]][[folder]] <- readRDS(file = paste0(orig.dir,"/VAST/zero_VAST_est.RDS",sep="") )
#for decpop_contemp
#if(((!((s=="Cod"&folder=="obsmodel6")|(s=="Had"&folder=="obsmodel6"))))){ try(VAST_data[[s]][[folder]] <-  rbind(VAST_est[[s]][[folder]][["spring"]],VAST_est[[s]][[folder]][["fall"]]),silent=TRUE)}
#if vast estimate for each season, use them
if((length(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["fall"]][1,])>2)&(length(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["spring"]][1,])>2)){VAST_data[[s]][[cov_direct]][[noise]][[folder]] <-  rbind(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["spring"]],VAST_est[[s]][[cov_direct]][[noise]][[folder]][["fall"]])}
#if missing one, use zeros in one and the estimate for the other
if((length(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["fall"]][1,])==2)&(length(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["spring"]][1,])>2)){VAST_data[[s]][[cov_direct]][[noise]][[folder]]<-  rbind(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["spring"]],VAST_data[[s]][[cov_direct]][[noise]][[folder]][VAST_data[[s]][[cov_direct]][[noise]][[folder]][,"season"]==2,] )}
if((length(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["fall"]][1,])>2)&(length(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["spring"]][1,])==2)){VAST_data[[s]][[cov_direct]][[noise]][[folder]]<-  rbind(VAST_est[[s]][[cov_direct]][[noise]][[folder]][["fall"]],VAST_data[[s]][[cov_direct]][[noise]][[folder]][VAST_data[[s]][[cov_direct]][[noise]][[folder]][,"season"]==1,] )}
SRS_data[[s]][[cov_direct]][[noise]][[folder]] <- rbind(SRS_data1[[s]][[cov_direct]][[noise]][[folder]][["spring"]],SRS_data1[[s]][[cov_direct]][[noise]][[folder]][["fall"]])
}
}
long_names <- c("Yellowtail Flounder", "Atlantic Cod", "Haddock")
#NEW WAY PLOTTING 3 TOGETHER ON SAME PAGE
# #field config settings for plotting
# FC_fall = c(FC_settings[[s]]$fall[folder,1],FC_settings[[s]]$fall[folder,2],FC_settings[[s]]$fall[folder,3],FC_settings[[s]]$fall[folder,4])
# FC_spring = c(FC_settings[[s]]$spring[folder,1],FC_settings[[s]]$spring[folder,2],FC_settings[[s]]$spring[folder,3],FC_settings[[s]]$spring[folder,4])
#
#store each obsmodel plot
Obsmodel_plot[[s]][[cov_direct]][[noise]][[folder]] <- ggplot() +
#this way plots data by season
geom_point(data = subset(as.data.frame(pop_by_season[[s]]),year>=year_min), aes(x=as.numeric(year),y=biomass, group = season, color = "Model"),size=3) +
geom_line(data = subset(as.data.frame(pop_by_season[[s]]),year>=year_min), aes(x=as.numeric(year),y=biomass, group =season, color = "Model"),size=1) +
#plot VAST estimate without covariates with NO noise
geom_errorbar(data=subset(VAST_data[[s]][["_NoCovs_"]][["NoNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season,ymin=Estimate-(1.96*Std..Error.for.Estimate), ymax=Estimate+(1.96*Std..Error.for.Estimate), color = "VAST No Cov No Noise"),width=.3) +
#geom_linerange(data=subset(VAST_data[[s]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season,ymin=Estimate-(1.96*Std..Error.for.Estimate), ymax=Estimate+(1.96*Std..Error.for.Estimate), color = "VAST Estimate")) +
geom_point(data=subset(VAST_data[[s]][["_NoCovs_"]][["NoNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season, color = "VAST No Cov No Noise"),size=2)+
geom_line(data=subset(VAST_data[[s]][["_NoCovs_"]][["NoNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season, color = "VAST No Cov No Noise"))+
#plot VAST estimate without covariates with WITH noise
geom_errorbar(data=subset(VAST_data[[s]][["_NoCovs_"]][["WithNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season,ymin=Estimate-(1.96*Std..Error.for.Estimate), ymax=Estimate+(1.96*Std..Error.for.Estimate), color = "VAST No Cov W Noise"),width=.3) +
#geom_linerange(data=subset(VAST_data[[s]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season,ymin=Estimate-(1.96*Std..Error.for.Estimate), ymax=Estimate+(1.96*Std..Error.for.Estimate), color = "VAST Estimate")) +
geom_point(data=subset(VAST_data[[s]][["_NoCovs_"]][["WithNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season, color = "VAST No Cov W Noise"),size=2)+
geom_line(data=subset(VAST_data[[s]][["_NoCovs_"]][["WithNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season, color = "VAST No Cov W Noise"))+
#plot VAST estimate with covariates with NO noise
geom_errorbar(data=subset(VAST_data[[s]][["_WithCov_"]][["NoNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season,ymin=Estimate-(1.96*Std..Error.for.Estimate), ymax=Estimate+(1.96*Std..Error.for.Estimate), color = "VAST w Cov No Noise"),width=.3) +
#geom_linerange(data=subset(VAST_data[[s]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season,ymin=Estimate-(1.96*Std..Error.for.Estimate), ymax=Estimate+(1.96*Std..Error.for.Estimate), color = "VAST Estimate")) +
geom_point(data=subset(VAST_data[[s]][["_WithCov_"]][["NoNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season, color = "VAST w Cov No Noise"))+
geom_line(data=subset(VAST_data[[s]][["_WithCov_"]][["NoNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season, color = "VAST w Cov No Noise"))+
#plot VAST estimate with covariates WITH noise
geom_errorbar(data=subset(VAST_data[[s]][["_WithCov_"]][["WithNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season,ymin=Estimate-(1.96*Std..Error.for.Estimate), ymax=Estimate+(1.96*Std..Error.for.Estimate), color = "VAST w Cov w Noise"),width=.3) +
#geom_linerange(data=subset(VAST_data[[s]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season,ymin=Estimate-(1.96*Std..Error.for.Estimate), ymax=Estimate+(1.96*Std..Error.for.Estimate), color = "VAST Estimate")) +
geom_point(data=subset(VAST_data[[s]][["_WithCov_"]][["WithNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season, color = "VAST w Cov w Noise"))+
geom_line(data=subset(VAST_data[[s]][["_WithCov_"]][["WithNoise_"]][[folder]],Year>=year_min),aes(x=Year,y=Estimate,group=season, color = "VAST w Cov w Noise"))+
#plot stratified calculation data with NO noise
geom_errorbar(data=as.data.frame(SRS_data[[s]][["_WithCov_"]][["NoNoise_"]][[folder]]),aes(x=year,y=mean.yr.absolute,group=season,ymin=mean.yr.absolute-(1.96*sd.mean.yr.absolute), ymax=mean.yr.absolute+(1.96*sd.mean.yr.absolute), color = "Strat Mean No Noise"),width=.3) +
# geom_linerange(data=as.data.frame(SRS_data[[s]][[folder]]),aes(x=year,y=mean.yr.absolute,group=season,ymin=mean.yr.absolute-(1.96*sd.mean.yr.absolute), ymax=mean.yr.absolute+(1.96*sd.mean.yr.absolute), color = "Stratified Mean")) +
geom_point(data=as.data.frame(SRS_data[[s]][["_WithCov_"]][["NoNoise_"]][[folder]]),aes(x=year,y=mean.yr.absolute,group=season, color = "Strat Mean No Noise"))+
geom_line(data=as.data.frame(SRS_data[[s]][["_WithCov_"]][["NoNoise_"]][[folder]]),aes(x=year,y=mean.yr.absolute,group=season, color = "Strat Mean No Noise"))+
#plot stratified calculation data with NO noise
geom_errorbar(data=as.data.frame(SRS_data[[s]][["_WithCov_"]][["WithNoise_"]][[folder]]),aes(x=year,y=mean.yr.absolute,group=season,ymin=mean.yr.absolute-(1.96*sd.mean.yr.absolute), ymax=mean.yr.absolute+(1.96*sd.mean.yr.absolute), color = "Strat Mean W Noise"),width=.3) +
# geom_linerange(data=as.data.frame(SRS_data[[s]][[folder]]),aes(x=year,y=mean.yr.absolute,group=season,ymin=mean.yr.absolute-(1.96*sd.mean.yr.absolute), ymax=mean.yr.absolute+(1.96*sd.mean.yr.absolute), color = "Stratified Mean")) +
geom_point(data=as.data.frame(SRS_data[[s]][["_WithCov_"]][["WithNoise_"]][[folder]]),aes(x=year,y=mean.yr.absolute,group=season, color = "Strat Mean W Noise"))+
geom_line(data=as.data.frame(SRS_data[[s]][["_WithCov_"]][["WithNoise_"]][[folder]]),aes(x=year,y=mean.yr.absolute,group=season, color = "Strat Mean W Noise"))+
facet_wrap(~ season, ncol =1) +
# labs(x="year",y="Biomass", title = paste(folder,"  SeV=",round(VAST_Model_error[[s]][[folder]][["spring"]],digits=2),
#                                          "  FC=", toString(FC_spring),
#                                          "  SeSM=",round(SRS_Model_error[[s]][[folder]][["spring"]],digits=2),
#                                          "  FeV=",round(VAST_Model_error[[s]][[folder]][["fall"]],digits=2),
#                                          "  FC=", toString(FC_fall),
#                                          "  FeSM=",round(SRS_Model_error[[s]][[folder]][["fall"]],digits=2),sep=""), color ="" )
labs(x="year",y="Biomass", title = paste(paste(s," ",folder,sep=""), "\n", #new line
paste(" V.NC.NN=",round(VAST_Model_error[[s]][["_NoCovs_"]][["NoNoise_"]][[folder]][["spring"]],digits=2),
"   V.NC.YN=",round(VAST_Model_error[[s]][["_NoCovs_"]][["WithNoise_"]][[folder]][["spring"]],digits=2),
" V.YC.NN=",round(VAST_Model_error[[s]][["_WithCov_"]][["NoNoise_"]][[folder]][["spring"]],digits=2),
"   V.YC.YN=",round(VAST_Model_error[[s]][["_WithCov_"]][["WithNoise_"]][[folder]][["spring"]],digits=2),
"  SM.NN=",round(SRS_Model_error[[s]][["_NoCovs_"]][["NoNoise_"]][[folder]][["spring"]],digits=2),
"  SM.YN=",round(SRS_Model_error[[s]][["_NoCovs_"]][["WithNoise_"]][[folder]][["spring"]],digits=2),sep=""), "\n", #new line
paste(" V.NC.NN=",round(VAST_Model_error[[s]][["_NoCovs_"]][["NoNoise_"]][[folder]][["fall"]],digits=2),
"   V.NC.YN=",round(VAST_Model_error[[s]][["_NoCovs_"]][["WithNoise_"]][[folder]][["fall"]],digits=2),
" V.YC.NN=",round(VAST_Model_error[[s]][["_WithCov_"]][["NoNoise_"]][[folder]][["fall"]],digits=2),
"   V.YC.YN=",round(VAST_Model_error[[s]][["_WithCov_"]][["WithNoise_"]][[folder]][["fall"]],digits=2),
"  SM.NN=",round(SRS_Model_error[[s]][["_NoCovs_"]][["NoNoise_"]][[folder]][["fall"]],digits=2),
"  SM.YN=",round(SRS_Model_error[[s]][["_NoCovs_"]][["WithNoise_"]][[folder]][["fall"]],digits=2),sep=""),sep=""), color ="" )+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12),
title=element_text(size=8))
#one plot per page
print(Obsmodel_plot[[s]][[cov_direct]][[noise]][[folder]])
# for more than one plot per page
# gridExtra::grid.arrange(Obsmodel_plot[[1]],Obsmodel_plot[[2]],Obsmodel_plot[[3]],nrow=3)
# gridExtra::grid.arrange(Obsmodel_plot[[4]],Obsmodel_plot[[5]],Obsmodel_plot[[6]],nrow=3)
}
}
dev.off()
View(VAST_est)
View(VAST_fit)
VAST_fit[["Had"]][["_WithCov_"]][["NoNoise_"]][["obsmodel7"]][["spring"]]
View(VAST_data)
fit_fall <- readRDS("C:/Users/benjamin.levy/Desktop/Github/READ-PDB-blevy2-MFS2/VAST/ForPaper/IncPop_ConTemp/Had/AllStrata_WithCov_NoNoise_/obsmodel7/fall/fit_fall.RDS")
View(fit_fall)
fit_fall[["X1_formula"]]
