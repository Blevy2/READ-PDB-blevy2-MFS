"Lon_i"=as.numeric(spring[,'Lon']),
"t_i"=as.numeric(spring[,'Year']),
"c_iz"=as.numeric(rep(0,nrow(spring))),
"b_i"=as.numeric(spring[,'Catch_KG']),
"a_i"=as.numeric(spring[,'AreaSwept_km2']),
X1_formula = X1_formula,
X2_formula = X2_formula,
covariate_data = covdata_spring,
optimize_args=list("lower"=-Inf,"upper"=Inf)),
silent = TRUE)
#   optimize_args=list("lower"=-Inf,"upper"=Inf)),
},{
print("NOT USING COVARIATES")
fit_spring <- try(fit_model(settings = settings,
"Lat_i"=as.numeric(spring[,'Lat']),
"Lon_i"=as.numeric(spring[,'Lon']),
"t_i"=as.numeric(spring[,'Year']),
"c_iz"=as.numeric(rep(0,nrow(spring))),
"b_i"=as.numeric(spring[,'Catch_KG']),
"a_i"=as.numeric(spring[,'AreaSwept_km2']),
optimize_args=list("lower"=-Inf,"upper"=Inf)),
silent = TRUE)
})
beep(sound=8)
model_aic[["spring"]][[j]] <- fit_spring$parameter_estimates$AIC
#create directory for season specific output
dir.create(paste(getwd(),"/obsmodel",j,"/spring",sep=""))
setwd(paste(getwd(),"/obsmodel",j,"/spring",sep=""))
#silent = TRUE might stop output in console
saveRDS(fit_spring,file = paste(getwd(),"/fit_spring.RDS",sep=""))
#plot_biomass_index(fit_spring)
plot(fit_spring)
#copy parameter files into iteration folder
#remove(fit_spring)
file.rename(from= paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/settings.txt",sep="")
,to =paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/obsmodel",j,"/spring/settings.txt",sep=""))
file.rename(from= paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/parameter_estimates.txt",sep="")
,to =paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/obsmodel",j,"/spring/parameter_estimates.txt",sep=""))
file.rename(from= paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/parameter_estimates.RDATA",sep="")
,to =paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/obsmodel",j,"/spring/parameter_estimates.RDATA",sep=""))
#plot covariate respopne, if applicable
print("PLOTTING COVARIATE RESPONSE")
pdf(file=paste(getwd(),"/",cov_used,"_cov_res_spring",".pdf",sep=""))
fittt = fit_spring
covariate_data_full = fittt$effects$covariate_data_full
catchability_data_full = fittt$effects$catchability_data_full
# Plot 1st linear predictor, but could use `transformation` to apply link function
pred = Effect.fit_model( fittt,
focal.predictors = c("Temp"),
which_formula = "X1",
xlevels = 100,
transformation = list(link=identity, inverse=identity) )
plot(pred)
pred = Effect.fit_model( fittt,
focal.predictors = c("Habitat"),
which_formula = "X2",
xlevels = 100,
transformation = list(link=identity, inverse=identity) )
plot(pred)
pred = Effect.fit_model( fittt,
focal.predictors = c("Temp"),
which_formula = "X2",
xlevels = 100,
transformation = list(link=identity, inverse=identity) )
plot(pred)
#
# pred2 = Effect.fit_model( fittt,
#                           focal.predictors = c("Temp"),
#                           which_formula = "X2",
#                           xlevels = 100,
#                           transformation = list(link=identity, inverse=identity) )
# plot(pred2)
#
# pred3 = Effect.fit_model( fittt,
#                           focal.predictors = c("Habitat"),
#                           which_formula = "X2",
#                           xlevels = 100,
#                           transformation = list(link=identity, inverse=identity) )
# plot(pred3)
#
#####################
# pdp package
#####################
#
#
#     #might need to add yea rback in to habitat
# #    fittt$covariate_data$Year=covdata_spring$Year
#
#     library(pdp)
#
#     # Make function to interface with pdp
#     pred.fun = function( object, newdata ){
#       predict( x=object,
#                Lat_i = object$data_frame$Lat_i,
#                Lon_i = object$data_frame$Lon_i,
#                t_i = object$data_frame$t_i,
#                a_i = object$data_frame$a_i,
#                what = "P1_iz",
#                new_covariate_data = newdata,
#                do_checks = FALSE )
#     }
#
#     # Run partial
#     Partial = partial( object = fittt,
#                        pred.var = "Habitat",
#                        pred.fun = pred.fun,
#                        train = fittt$covariate_data )
#
#     # Make plot using ggplot2
#     library(ggplot2)
#     autoplot(Partial)
dev.off()
remove(fittt)
remove(fit_spring)
setwd('..') #move up one directory
dir.create(paste(getwd(),"/fall",sep="")) #create fall directory
setwd('..') #move up one directory
fall <- adios %>%
filter(Season == "FALL") %>%
# filter(YEAR >= 2009) %>%
mutate(mycatch = Had) %>%
select(Year = year,
Catch_KG = mycatch,
Lat = Lat,
Lon = Lon) %>%
mutate(Vessel = "missing",
AreaSwept_km2 = mean(cell_size)) #CORRECT AREA SWEPT?
# summary(fall)
# names(fall)
# reorder the data for use in VAST
#DOESNT SEEM TO BE USED BELOW...??
# nrows <- length(spring[,1])
# reorder <- sample(1:nrows, nrows, replace = FALSE)
# spring_reorder <- spring
# spring_reorder[1:nrows, ] <- spring[reorder, ]
# head(spring)
# head(spring_reorder)
# model with original data and default settings (Poisson link)
example <- list(fall)
example$Region <- "northwest_atlantic"
example$strata.limits <- data.frame(Georges_Bank = GB_strat) #THESE ARE HAD STRATA
#FC2 = c("Omega1" = 1, "Epsilon1" = 1, "Omega2" = 1, "Epsilon2" = 1)
FC2 = c("Omega1" = 0, "Epsilon1" =0, "Omega2" = 1, "Epsilon2" = 1)
RhoConfig = c("Beta1" = 3, "Beta2" = 3, "Epsilon1" = 0, "Epsilon2" =4)
settings <- make_settings(n_x = 500,
Region=example$Region,
purpose="index2",
strata.limits=example$strata.limits,
bias.correct=TRUE,
FieldConfig= FC2,
RhoConfig=RhoConfig,
ObsModel = obsmodel,
knot_method = "samples")
#WHEN ADDING ADDITIONAL FIELDCONFIG SETTINGS ALL 4 SETTINGS BELOW MUST BE INCLUDED
# settings <- make_settings(n_x = 500,  #NEED ENOUGH KNOTS OR WILL HAVE ISSUES WITH PARAMETER FITTING
#                           Region=example$Region,
#                           purpose="index2",
#                           strata.limits=example$strata.limits,
#                           bias.correct=TRUE,
#                           FieldConfig= c("Omega1"=0, "Epsilon1"=0, "Omega2"=0, "Epsilon2"=0),
#                           RhoConfig = c("Beta1" = 0, "Beta2" = 3, "Epsilon1" = 0, "Epsilon2" = 0))
#' Specification of \code{FieldConfig} can be seen by calling \code{\link[FishStatsUtils]{make_settings}},
#'   which is the recommended way of generating this input for beginning users.
#dafault FieldConfig settings:
# if(missing(FieldConfig)) FieldConfig = c("Omega1"=0, "Epsilon1"=n_categories, "Omega2"=0, "Epsilon2"=0)
#######################################################################################
# Try this first
#######################################################################################
ifelse(covariates == "TRUE",{
print("USING COVARIATES")
#MoveCov = hab^2*temp_tolerance
# X1_formula = ~ poly(MoveCov, degree=2 )
# X2_formula = ~ poly(MoveCov, degree=2 )
#Chris C idea for including 2 covariates
# X1_formula = ~ poly(Temp, degree=2 )
# X2_formula = ~ poly(Temp, degree=2 ) + poly(Habitat, degree=2 )
# X1_formula = ~ 1
# X2_formula = ~ poly(Habitat, degree=3 )
#HABITAT AND TEMP
# X1_formula = ~ poly(Habitat, degree=2 )
# X2_formula = ~ poly(Temp, degree=2 ) + poly(Habitat, degree=2 )
fit_fall <- try(fit_model(settings = settings,
"Lat_i"=as.numeric(fall[,'Lat']),
"Lon_i"=as.numeric(fall[,'Lon']),
"t_i"=as.numeric(fall[,'Year']),
"c_iz"=as.numeric(rep(0,nrow(fall))),
"b_i"=as.numeric(fall[,'Catch_KG']),
"a_i"=as.numeric(fall[,'AreaSwept_km2']),
X1_formula = X1_formula,
X2_formula = X2_formula,
covariate_data = covdata_fall,
optimize_args=list("lower"=-Inf,"upper"=Inf)),
silent = TRUE)
},{
print("NOT USING COVARIATES")
fit_fall <- try(fit_model(settings = settings,
"Lat_i"=as.numeric(fall[,'Lat']),
"Lon_i"=as.numeric(fall[,'Lon']),
"t_i"=as.numeric(fall[,'Year']),
"c_iz"=as.numeric(rep(0,nrow(fall))),
"b_i"=as.numeric(fall[,'Catch_KG']),
"a_i"=as.numeric(fall[,'AreaSwept_km2']),
optimize_args=list("lower"=-Inf,"upper"=Inf)),
silent = TRUE)
})
beep(sound=8)
model_aic[["fall"]][[j]] <- fit_fall$parameter_estimates$AIC
#silent = TRUE might stop output in console
setwd(paste(getwd(),"/obsmodel",j,"/fall",sep=""))  #set it
saveRDS(fit_fall,file = paste(getwd(),"/fit_fall.RDS",sep=""))
# plot_biomass_index(fit_fall)
plot(fit_fall)
#remove(fit_fall)
file.rename(from= paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/settings.txt",sep="")
,to =paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/obsmodel",j,"/fall/settings.txt",sep=""))
file.rename(from= paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/parameter_estimates.txt",sep="")
,to =paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/obsmodel",j,"/fall/parameter_estimates.txt",sep=""))
file.rename(from= paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/parameter_estimates.RDATA",sep="")
,to =paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/obsmodel",j,"/fall/parameter_estimates.RDATA",sep=""))
#plot covariate respopne, if applicable
print("PLOTTING COVARIATE RESPONSE")
pdf(file=paste(getwd(),"/",cov_used,"_cov_res_fall",".pdf",sep=""))
fittt = fit_fall
covariate_data_full = fittt$effects$covariate_data_full
catchability_data_full = fittt$effects$catchability_data_full
# Plot 1st linear predictor, but could use `transformation` to apply link function
pred = Effect.fit_model( fittt,
focal.predictors = c("Temp"),
which_formula = "X1",
xlevels = 100,
transformation = list(link=identity, inverse=identity) )
plot(pred)
pred = Effect.fit_model( fittt,
focal.predictors = c("Habitat"),
which_formula = "X2",
xlevels = 100,
transformation = list(link=identity, inverse=identity) )
plot(pred)
pred = Effect.fit_model( fittt,
focal.predictors = c("Temp"),
which_formula = "X2",
xlevels = 100,
transformation = list(link=identity, inverse=identity) )
plot(pred)
#
# pred2 = Effect.fit_model( fittt,
#                           focal.predictors = c("Temp"),
#                           which_formula = "X2",
#                           xlevels = 100,
#                           transformation = list(link=identity, inverse=identity) )
# plot(pred2)
#
# pred3 = Effect.fit_model( fittt,
#                           focal.predictors = c("Habitat"),
#                           which_formula = "X2",
#                           xlevels = 100,
#                           transformation = list(link=identity, inverse=identity) )
# plot(pred3)
#
#####################
# pdp package
#####################
#
#
#     #might need to add yea rback in to habitat
# #    fittt$covariate_data$Year=covdata_spring$Year
#
#     library(pdp)
#
#     # Make function to interface with pdp
#     pred.fun = function( object, newdata ){
#       predict( x=object,
#                Lat_i = object$data_frame$Lat_i,
#                Lon_i = object$data_frame$Lon_i,
#                t_i = object$data_frame$t_i,
#                a_i = object$data_frame$a_i,
#                what = "P1_iz",
#                new_covariate_data = newdata,
#                do_checks = FALSE )
#     }
#
#     # Run partial
#     Partial = partial( object = fittt,
#                        pred.var = "Habitat",
#                        pred.fun = pred.fun,
#                        train = fittt$covariate_data )
#
#     # Make plot using ggplot2
#     library(ggplot2)
#     autoplot(Partial)
dev.off()
remove(fittt)
remove(fit_fall)
#go back to scenario directory before moving to next model case
setwd('..')
setwd('..')
setwd('..')
setwd('..')
setwd('..')
getwd()
setwd(orig.dir)
j=7
setwd((paste(getwd(),"/",scenario,"/Had/",str_dir,cov_dir,noise_dir,sep="")))
(paste(getwd(),"/",scenario,"/Had/",str_dir,cov_dir,noise_dir,sep=""))
setwd(paste(getwd(),"/",scenario,"/Had/",str_dir,cov_dir,noise_dir,sep=""))
getwd()
setwd(paste(getwd(),"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,sep=""))
if(j == 7) {obsmodel <- c(10, 2); run <- 7}
ifelse(exclude_strata==TRUE,
{dir.create(paste(getwd(),"/",scenario,"/Had/ExcludeStrata",cov_dir,noise_dir,sep=""))
str_dir <- "ExcludeStrata"},
{dir.create(paste(getwd(),"/",scenario,"/Had/AllStrata",cov_dir,noise_dir,sep=""))
str_dir <- "AllStrata"})
getwd()
ifelse(exclude_strata==TRUE,
{dir.create(paste(getwd(),"/",scenario,"/Had/ExcludeStrata",cov_dir,noise_dir,sep=""))
str_dir <- "ExcludeStrata"},
{dir.create(paste(getwd(),"/",scenario,"/Had/AllStrata",cov_dir,noise_dir,sep=""))
str_dir <- "AllStrata"})
setwd('..')
setwd('..')
setwd('..')
setwd('..')
getwd()
ifelse(exclude_strata==TRUE,
{dir.create(paste(getwd(),"/",scenario,"/Had/ExcludeStrata",cov_dir,noise_dir,sep=""))
str_dir <- "ExcludeStrata"},
{dir.create(paste(getwd(),"/",scenario,"/Had/AllStrata",cov_dir,noise_dir,sep=""))
str_dir <- "AllStrata"})
dir.create(paste(getwd(),"/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/obsmodel",j,sep=""))
setwd((paste(getwd(),"/",scenario,"/Had/",str_dir,cov_dir,noise_dir,sep="")))
getwd()
GB_strat <- c(1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1210, 1220, 1230, 1240, 1250, 1290, 1300)
GB_strat <- GB_strat[!(GB_strat %in% exclude_full)]
# model with original data and default settings (Poisson link)
example <- list(spring)
example$Region <- "northwest_atlantic"
example$strata.limits <- data.frame(Georges_Bank = GB_strat) #THESE ARE HAD STRATA
FC1 = c("Omega1" = 0, "Epsilon1" =0, "Omega2" = 1, "Epsilon2" = 1)
RhoConfig = c("Beta1" = 3, "Beta2" = 3, "Epsilon1" = 0, "Epsilon2" = 4)
settings <- make_settings(n_x = 500,  #NEED ENOUGH KNOTS OR WILL HAVE ISSUES WITH PARAMETER FITTING
Region=example$Region,
purpose="index2",
strata.limits=example$strata.limits,
bias.correct=TRUE,
FieldConfig= FC1,
RhoConfig = RhoConfig,
ObsModel = obsmodel,
knot_method = "samples") #ABOVE SETTINGS PRODUCE ERRORS. CHECK_FIT SUGGESTS ADDITIONAL FIELDCONFIG SETTINGS
fall <- adios %>%
filter(Season == "FALL") %>%
# filter(YEAR >= 2009) %>%
mutate(mycatch = Had) %>%
select(Year = year,
Catch_KG = mycatch,
Lat = Lat,
Lon = Lon) %>%
mutate(Vessel = "missing",
AreaSwept_km2 = mean(cell_size)) #CORRECT AREA SWEPT?
# model with original data and default settings (Poisson link)
example <- list(fall)
example$Region <- "northwest_atlantic"
example$strata.limits <- data.frame(Georges_Bank = GB_strat) #THESE ARE HAD STRATA
FC2 = c("Omega1" = 0, "Epsilon1" =0, "Omega2" = 1, "Epsilon2" = 1)
RhoConfig = c("Beta1" = 3, "Beta2" = 3, "Epsilon1" = 0, "Epsilon2" =4)
settings <- make_settings(n_x = 500,
Region=example$Region,
purpose="index2",
strata.limits=example$strata.limits,
bias.correct=TRUE,
FieldConfig= FC2,
RhoConfig=RhoConfig,
ObsModel = obsmodel,
knot_method = "samples")
#######################################################################################
# Try this first
#######################################################################################
ifelse(covariates == "TRUE",{
print("USING COVARIATES")
#MoveCov = hab^2*temp_tolerance
# X1_formula = ~ poly(MoveCov, degree=2 )
# X2_formula = ~ poly(MoveCov, degree=2 )
#Chris C idea for including 2 covariates
# X1_formula = ~ poly(Temp, degree=2 )
# X2_formula = ~ poly(Temp, degree=2 ) + poly(Habitat, degree=2 )
# X1_formula = ~ 1
# X2_formula = ~ poly(Habitat, degree=3 )
#HABITAT AND TEMP
# X1_formula = ~ poly(Habitat, degree=2 )
# X2_formula = ~ poly(Temp, degree=2 ) + poly(Habitat, degree=2 )
fit_fall <- try(fit_model(settings = settings,
"Lat_i"=as.numeric(fall[,'Lat']),
"Lon_i"=as.numeric(fall[,'Lon']),
"t_i"=as.numeric(fall[,'Year']),
"c_iz"=as.numeric(rep(0,nrow(fall))),
"b_i"=as.numeric(fall[,'Catch_KG']),
"a_i"=as.numeric(fall[,'AreaSwept_km2']),
X1_formula = X1_formula,
X2_formula = X2_formula,
covariate_data = covdata_fall,
optimize_args=list("lower"=-Inf,"upper"=Inf)),
silent = TRUE)
},{
print("NOT USING COVARIATES")
fit_fall <- try(fit_model(settings = settings,
"Lat_i"=as.numeric(fall[,'Lat']),
"Lon_i"=as.numeric(fall[,'Lon']),
"t_i"=as.numeric(fall[,'Year']),
"c_iz"=as.numeric(rep(0,nrow(fall))),
"b_i"=as.numeric(fall[,'Catch_KG']),
"a_i"=as.numeric(fall[,'AreaSwept_km2']),
optimize_args=list("lower"=-Inf,"upper"=Inf)),
silent = TRUE)
})
beep(sound=8)
model_aic[["fall"]][[j]] <- fit_fall$parameter_estimates$AIC
#silent = TRUE might stop output in console
setwd(paste(getwd(),"/obsmodel",j,"/fall",sep=""))  #set it
saveRDS(fit_fall,file = paste(getwd(),"/fit_fall.RDS",sep=""))
# plot_biomass_index(fit_fall)
plot(fit_fall)
#remove(fit_fall)
file.rename(from= paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/settings.txt",sep="")
,to =paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/obsmodel",j,"/fall/settings.txt",sep=""))
file.rename(from= paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/parameter_estimates.txt",sep="")
,to =paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/obsmodel",j,"/fall/parameter_estimates.txt",sep=""))
file.rename(from= paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/parameter_estimates.RDATA",sep="")
,to =paste(orig.dir,"/VAST/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/obsmodel",j,"/fall/parameter_estimates.RDATA",sep=""))
#plot covariate respopne, if applicable
print("PLOTTING COVARIATE RESPONSE")
pdf(file=paste(getwd(),"/",cov_used,"_cov_res_fall",".pdf",sep=""))
fittt = fit_fall
covariate_data_full = fittt$effects$covariate_data_full
catchability_data_full = fittt$effects$catchability_data_full
# Plot 1st linear predictor, but could use `transformation` to apply link function
pred = Effect.fit_model( fittt,
focal.predictors = c("Temp"),
which_formula = "X1",
xlevels = 100,
transformation = list(link=identity, inverse=identity) )
plot(pred)
pred = Effect.fit_model( fittt,
focal.predictors = c("Habitat"),
which_formula = "X2",
xlevels = 100,
transformation = list(link=identity, inverse=identity) )
plot(pred)
pred = Effect.fit_model( fittt,
focal.predictors = c("Temp"),
which_formula = "X2",
xlevels = 100,
transformation = list(link=identity, inverse=identity) )
plot(pred)
#
# pred2 = Effect.fit_model( fittt,
#                           focal.predictors = c("Temp"),
#                           which_formula = "X2",
#                           xlevels = 100,
#                           transformation = list(link=identity, inverse=identity) )
# plot(pred2)
#
# pred3 = Effect.fit_model( fittt,
#                           focal.predictors = c("Habitat"),
#                           which_formula = "X2",
#                           xlevels = 100,
#                           transformation = list(link=identity, inverse=identity) )
# plot(pred3)
#
#####################
# pdp package
#####################
#
#
#     #might need to add yea rback in to habitat
# #    fittt$covariate_data$Year=covdata_spring$Year
#
#     library(pdp)
#
#     # Make function to interface with pdp
#     pred.fun = function( object, newdata ){
#       predict( x=object,
#                Lat_i = object$data_frame$Lat_i,
#                Lon_i = object$data_frame$Lon_i,
#                t_i = object$data_frame$t_i,
#                a_i = object$data_frame$a_i,
#                what = "P1_iz",
#                new_covariate_data = newdata,
#                do_checks = FALSE )
#     }
#
#     # Run partial
#     Partial = partial( object = fittt,
#                        pred.var = "Habitat",
#                        pred.fun = pred.fun,
#                        train = fittt$covariate_data )
#
#     # Make plot using ggplot2
#     library(ggplot2)
#     autoplot(Partial)
dev.off()
remove(fittt)
remove(fit_fall)
#go back to scenario directory before moving to next model case
setwd('..')
setwd('..')
setwd('..')
setwd('..')
setwd('..')
#might need to go up another directory
setwd('..')
saveRDS(model_aic, file = paste(getwd(),"/",scenario,"/Had/",str_dir,cov_dir,noise_noise,"/model_aic.RDS",sep=""))
saveRDS(model_aic, file = paste(getwd(),"/",scenario,"/Had/",str_dir,cov_dir,noise_dir,"/model_aic.RDS",sep=""))
